<%- include("../../views/partials/admin/header") %>

<link href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.css" rel="stylesheet">

<style>
  .cropper-container {
    width: 100%;
    max-width: 500px;
    height: auto;
    position: relative;
  }
  
  .image-cropper img {
    width: 100%;
    height: auto;
  }
  
  .error-message {
    color: red;
    font-size: 0.875rem;
    display: none;
  }
  
  .error-message.show {
    display: block;
  }
  
  .thumbnails-container {
    display: flex;
    overflow-x: auto;
    gap: 10px;
  }
  
  .image-upload-card {
    transition: all 0.3s ease;
  }
  
  .image-upload-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  }
  
  .upload-area {
    border: 2px dashed #d1d5db;
    transition: all 0.3s ease;
  }
  
  .upload-area:hover {
    border-color: #3b82f6;
    background-color: #eff6ff;
  }
  
  .upload-area.has-image {
    border-color: #10b981;
    background-color: #f0fdf4;
  }

  .existing-image-card {
    position: relative;
    border: 2px solid #10b981;
    border-radius: 12px;
    padding: 8px;
    background: #f0fdf4;
    transition: all 0.3s ease;
  }

  .existing-image-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  }

  .delete-image-btn {
    position: absolute;
    top: -8px;
    right: -8px;
    background: #ef4444;
    color: white;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 12px;
  }

  .delete-image-btn:hover {
    background: #dc2626;
    transform: scale(1.1);
  }
</style>

<div class="pt-24 h-[calc(100vh-6rem)] overflow-y-scroll scrollbar-hide px-6 bg-gray-100 w-full">
  <div class="max-w-7xl mx-auto">
    <!-- Page Header -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-slate-800 mb-2">Edit Product</h1>
      <p class="text-gray-600">Update your product information and manage inventory details</p>
    </div>

    <form method="post" action="/admin/editProduct/<%=product._id%>" enctype="multipart/form-data" onsubmit="return validateForm()" class="space-y-6">
      
      <!-- Basic Information Card -->
      <div class="bg-white rounded-lg shadow-md overflow-hidden">
        <div class="bg-gray-50 px-6 py-4 border-b border-gray-200">
          <h2 class="text-lg font-semibold text-slate-700 flex items-center">
            <i class="fas fa-info-circle mr-3 text-blue-500"></i>
            Basic Information
          </h2>
        </div>
        <div class="p-6">
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <!-- Product Name -->
            <div class="lg:col-span-1">
              <label for="product_name" class="block text-gray-700 font-medium mb-2">
                Product Name <span class="text-red-500">*</span>
              </label>
              <input 
                type="text" 
                name="productName" 
                value="<%=product.productName%>"
                id="product_name" 
                placeholder="Enter product name"
                class="w-full px-4 py-3 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-gray-800 transition-all duration-200"
              >
              <div id="productName-error" class="error-message text-red-500 text-sm mt-1"></div>
            </div>
            
            <!-- Category -->
            <div class="lg:col-span-1">
              <label class="block text-gray-700 font-medium mb-2">
                Category <span class="text-red-500">*</span>
              </label>
              <select 
                name="category"
                class="w-full px-4 py-3 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-gray-800 transition-all duration-200"
              >
                <% for(let i = 0; i < cat.length; i++) { %>
                  <option value="<%= cat[i].name %>" <%= product.category === cat[i].name ? 'selected' : '' %>><%= cat[i].name %></option>
                <% } %>
              </select>
              <div id="category-error" class="error-message text-red-500 text-sm mt-1"></div>
            </div>
          </div>
          
          <!-- Description - Full Width -->
          <div class="mt-6">
            <label for="descriptionid" class="block text-gray-700 font-medium mb-2">
              Full Description <span class="text-red-500">*</span>
            </label>
            <textarea 
              id="descriptionid" 
              name="descriptionData" 
              rows="4" 
              placeholder="Describe your product in detail..."
              class="w-full px-4 py-3 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-gray-800 resize-none transition-all duration-200"
            ><%=product.description%></textarea>
            <div id="description-error" class="error-message text-red-500 text-sm mt-1"></div>
          </div>
        </div>
      </div>

      <!-- Image Upload Card -->
      <div class="bg-white rounded-lg shadow-md overflow-hidden">
        <div class="bg-gray-50 px-6 py-4 border-b border-gray-200">
          <h2 class="text-lg font-semibold text-slate-700 flex items-center">
            <i class="fas fa-images mr-3 text-green-500"></i>
            Manage Images
          </h2>
        </div>
        <div class="p-6">
          <div class="bg-blue-50 border-l-4 border-blue-400 p-4 mb-6">
            <div class="flex">
              <div class="flex-shrink-0">
                <i class="fas fa-info-circle text-blue-400"></i>
              </div>
              <div class="ml-3">
                <p class="text-sm text-blue-700">
                  Current images are shown below. You can delete existing images or upload new ones. You can crop each new image after selection.
                </p>
              </div>
            </div>
          </div>

          <!-- Existing Images -->
          <% if(product.images && product.images.length > 0) { %>
            <div class="mb-8">
              <h3 class="text-md font-semibold text-gray-700 mb-4 flex items-center">
                <i class="fas fa-folder-open mr-2 text-amber-500"></i>
                Current Images
              </h3>
              <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                <% for(let i = 0; i < product.images.length; i++) { %>
                  <div class="existing-image-card">
                    <input type="hidden" value="<%=product.images[i]%>" id="imageDatas">
                    <img 
                      class="w-full h-32 object-cover rounded-lg" 
                      src="/uploads/product-images/<%=product.images[i]%>" 
                      alt="Product Image <%= i + 1 %>"
                    >
                    <div 
                      class="delete-image-btn" 
                      onclick="deleteSingleImage('<%=product.images[i]%>', '<%=product._id%>')"
                      title="Delete Image"
                    >
                      <i class="fas fa-times"></i>
                    </div>
                  </div>
                <% } %>
              </div>
            </div>
          <% } %>

          <!-- New Image Uploads -->
          <div>
            <h3 class="text-md font-semibold text-gray-700 mb-4 flex items-center">
              <i class="fas fa-cloud-upload-alt mr-2 text-green-500"></i>
              Upload New Images
            </h3>
            
            <% 
              // Calculate how many existing images we have
              const currentImageCount = product.images ? product.images.length : 0;
              const maxTotalImages = 4;
              const availableSlots = maxTotalImages - currentImageCount;
            %>
            
            <% if (availableSlots > 0) { %>
              <div class="bg-amber-50 border-l-4 border-amber-400 p-4 mb-4">
                <div class="flex">
                  <div class="flex-shrink-0">
                    <i class="fas fa-info-circle text-amber-400"></i>
                  </div>
                  <div class="ml-3">
                    <p class="text-sm text-amber-700">
                      You can upload <%= availableSlots %> more image<%= availableSlots > 1 ? 's' : '' %> (Maximum 4 images total).
                    </p>
                  </div>
                </div>
              </div>
              
              <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6">
                <% for(let i = 1; i <= availableSlots; i++) { %>
                  <div class="image-upload-card">
                    <div class="upload-area rounded-xl p-6 text-center cursor-pointer relative" onclick="document.getElementById('input<%= i %>').click()">
                      <!-- Image Preview -->
                      <img src="/placeholder.svg" alt="" id="imgView<%= i %>" class="w-full h-40 object-cover rounded-lg mb-4 hidden">
                      
                      <!-- Upload Placeholder -->
                      <div id="placeholder<%= i %>" class="text-gray-500">
                        <div class="w-16 h-16 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center">
                          <i class="fas fa-cloud-upload-alt text-2xl text-gray-400"></i>
                        </div>
                        <h3 class="font-medium text-gray-700 mb-1">New Image <%= i %></h3>
                        <p class="text-sm text-gray-500">Click to upload</p>
                        <p class="text-xs text-gray-400 mt-1">PNG, JPG up to 10MB</p>
                      </div>
                      
                      <!-- File Input -->
                      <input 
                        class="hidden" 
                        type="file" 
                        name="images" 
                        id="input<%= i %>" 
                        accept="image/png, image/jpeg, image/jpg" 
                        onchange="viewImage<%= i %>(event), viewImage(event, <%= i %>)"
                      >
                    </div>
                    
                    <!-- Cropper Container -->
                    <div class="image-cropper hidden mt-4">
                      <div class="bg-gray-100 p-4 rounded-lg">
                        <img src="/placeholder.svg" id="croppedImg<%= i %>" alt="" class="w-full rounded">
                        <div class="flex justify-center gap-3 mt-4">
                          <button type="button" id="saveButton<%= i %>" class="px-4 py-2 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700 transition duration-200 flex items-center gap-2">
                            <i class="fas fa-check"></i>
                            Save
                          </button>
                          <button type="button" onclick="cancelCrop(<%= i %>)" class="px-4 py-2 bg-gray-500 text-white text-sm rounded-lg hover:bg-gray-600 transition duration-200 flex items-center gap-2">
                            <i class="fas fa-times"></i>
                            Cancel
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                <% } %>
              </div>
            <% } else { %>
              <div class="bg-green-50 border-l-4 border-green-400 p-4">
                <div class="flex">
                  <div class="flex-shrink-0">
                    <i class="fas fa-check-circle text-green-400"></i>
                  </div>
                  <div class="ml-3">
                    <p class="text-sm text-green-700">
                      Maximum number of images (4) reached. Delete an existing image to upload a new one.
                    </p>
                  </div>
                </div>
              </div>
            <% } %>
            
            <div id="images-error" class="error-message text-red-500 text-sm mt-4"></div>
          </div>
        </div>
      </div>

      <!-- Variants Card -->
      <div class="bg-white rounded-lg shadow-md overflow-hidden">
        <div class="bg-gray-50 px-6 py-4 border-b border-gray-200">
          <h2 class="text-lg font-semibold text-slate-700 flex items-center">
            <i class="fas fa-palette mr-3 text-purple-500"></i>
            Product Variants
          </h2>
        </div>
        <div class="p-6">
          <div class="bg-purple-50 border-l-4 border-purple-400 p-4 mb-6">
            <div class="flex">
              <div class="flex-shrink-0">
                <i class="fas fa-info-circle text-purple-400"></i>
              </div>
              <div class="ml-3">
                <p class="text-sm text-purple-700">
                  Manage different variants of your product with their respective pricing, inventory, and specifications.
                </p>
              </div>
            </div>
          </div>
          
          <div id="variants-container" class="mb-6">
            <% if (product.variants && product.variants.length > 0) { %>
              <% for (let i = 0; i < product.variants.length; i++) { %>
                <div class="border border-gray-200 p-6 rounded-lg bg-gray-50 relative hover:shadow-md transition-shadow duration-200 mb-4">
                  <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-medium text-gray-800 flex items-center">
                      <i class="fas fa-cube mr-2 text-indigo-500"></i>
                      Variant <%= i + 1 %>
                    </h3>
                    <input name="variants[<%= i %>][_id]" type="text" value="<%= product.variants[i]._id %>" hidden>
                    <button type="button" onclick="removeVariantField(this)" class="text-red-500 hover:text-red-700 hover:bg-red-50 p-2 rounded-lg transition-all duration-200">
                      <i class="fas fa-trash-alt"></i>
                    </button>
                  </div>
                  
                  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <!-- Regular Price -->
                    <div>
                      <label class="block text-sm font-medium text-gray-700 mb-2">
                        Regular Price <span class="text-red-500">*</span>
                      </label>
                      <input 
                        type="text" 
                        name="variants[<%= i %>][regularPrice]" 
                        value="<%= product.variants[i].regularPrice %>"
                        placeholder="0.00" 
                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-200"
                      >
                      <div id="regularPrice-error-<%= i %>" class="error-message text-red-500 text-xs mt-1"></div>
                    </div>
                    
                    <!-- Sale Price -->
                    <div>
                      <label class="block text-sm font-medium text-gray-700 mb-2">
                        Sale Price <span class="text-red-500">*</span>
                      </label>
                      <input 
                        type="text" 
                        name="variants[<%= i %>][salePrice]" 
                        value="<%= product.variants[i].salePrice %>"
                        placeholder="0.00"
                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-200"
                      >
                      <div id="salePrice-error-<%= i %>" class="error-message text-red-500 text-xs mt-1"></div>
                    </div>
                    
                    <!-- Quantity -->
                    <div>
                      <label class="block text-sm font-medium text-gray-700 mb-2">
                        Quantity <span class="text-red-500">*</span>
                      </label>
                      <input 
                        type="number" 
                        name="variants[<%= i %>][quantity]" 
                        value="<%= product.variants[i].quantity %>"
                        placeholder="0" 
                        min="0"
                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-200"
                      >
                      <div id="quantity-error-<%= i %>" class="error-message text-red-500 text-xs mt-1"></div>
                    </div>
                    
                    <!-- Color -->
                    <div>
                      <label class="block text-sm font-medium text-gray-700 mb-2">
                        Color <span class="text-red-500">*</span>
                      </label>
                      <input 
                        type="text" 
                        name="variants[<%= i %>][color]" 
                        value="<%= product.variants[i].color %>"
                        placeholder="e.g., Red, Blue"
                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-200"
                      >
                      <div id="color-error-<%= i %>" class="error-message text-red-500 text-xs mt-1"></div>
                    </div>
                  </div>
                </div>
              <% } %>
            <% } %>
            
            <button type="button" onclick="addVariantField()" class="mt-4 bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition duration-200 flex items-center gap-2">
              <i class="fas fa-plus"></i>
              Add Variant
            </button>
          </div>
          <div id="variant-error" class="error-message text-red-500 text-sm mt-1"></div>
        </div>
      </div>

      <!-- Submit Section -->
      <div class="bg-white rounded-lg shadow-md p-6">
        <div class="flex justify-between items-center">
          <div>
            <h3 class="text-lg font-medium text-gray-900">Ready to update?</h3>
            <p class="text-sm text-gray-500">Review your changes before updating the product.</p>
          </div>
          <button type="button" onclick="validateAndSubmit()" class="bg-blue-600 text-white px-8 py-3 rounded-lg hover:bg-blue-500 transition font-medium flex items-center gap-3 shadow-lg hover:shadow-xl">
            <i class="fas fa-save"></i>
            Update Product
          </button>
        </div>
      </div>
    </form>
  </div>
</div>
</div>

<script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
let variantIndex = document.querySelectorAll('#variants-container .border').length;

function validateAndSubmit() {
  if (validateForm()) {
    // Show loading state
    const submitBtn = document.querySelector('button[onclick="validateAndSubmit()"]');
    const originalText = submitBtn.innerHTML;
    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Updating...';
    submitBtn.disabled = true;
    
    setTimeout(() => {
      document.forms[0].submit();
    }, 500);
  }
}

function validateForm() {
  let isValid = true;
  let imageDatas = document.querySelectorAll("#imageDatas");
  let currentExistingImages = imageDatas.length;
  clearErrorMessages();

  // Main product fields
  const name = document.getElementsByName('productName')[0]?.value;
  const description = document.getElementsByName('descriptionData')[0]?.value;
  const category = document.getElementsByName('category')[0]?.value;
  
  // Count new images being uploaded
  let newImageCount = 0;
  <% for(let i = 1; i <= 4; i++) { %>
    const input<%= i %> = document.getElementById('input<%= i %>');
    if (input<%= i %> && input<%= i %>.files.length > 0) {
      newImageCount++;
    }
  <% } %>

  if (name.trim() === "") {
    displayErrorMessage('productName-error', 'Please enter a product name.');
    isValid = false;
  } else if (!/^[a-zA-Z\s]+$/.test(name.trim())) {
    displayErrorMessage('productName-error', 'Product name should contain only alphabetic characters.');
    isValid = false;
  } else if (name.trim().length < 2) {
    displayErrorMessage('productName-error', 'Product name must be at least 2 characters long.');
    isValid = false;
  }

  if (description.trim() === '') {
    displayErrorMessage('description-error', 'Please enter a product description.');
    isValid = false;
  } else if (!/^[\p{L}\p{N}\s.,''"""!?()\-–—]+$/u.test(description.trim())) {
    displayErrorMessage('description-error', 'Description contains invalid characters.');
    isValid = false;
  } else if (description.trim().length < 10) {
    displayErrorMessage('description-error', 'Description must be at least 10 characters long.');
    isValid = false;
  }

  // Check if we have at least one image (existing or new)
  if (currentExistingImages === 0 && newImageCount === 0) {
    displayErrorMessage("images-error", 'Please select at least one image.');
    isValid = false;
  }

  // Check if total images don't exceed 4
  if (currentExistingImages + newImageCount > 4) {
    displayErrorMessage("images-error", 'Maximum 4 images allowed. You have ' + currentExistingImages + ' existing images.');
    isValid = false;
  }

  // Validate variants
  const variantCount = document.querySelectorAll('[name$="[color]"]').length;
  
  if (variantCount === 0) {
    displayErrorMessage("variant-error", 'There should be at least 1 variant.');
    isValid = false;
  }

  for (let i = 0; i < variantCount; i++) {
    const _id = document.getElementsByName(`variants[${i}][_id]`)[0]?.value;
    const color = document.getElementsByName(`variants[${i}][color]`)[0]?.value;
    const salePrice = document.getElementsByName(`variants[${i}][salePrice]`)[0]?.value;
    const quantity = document.getElementsByName(`variants[${i}][quantity]`)[0]?.value;
    const regularPrice = document.getElementsByName(`variants[${i}][regularPrice]`)[0]?.value;


    if (!regularPrice || isNaN(regularPrice) || parseFloat(regularPrice) <= 0) {
      displayErrorMessage(`regularPrice-error-${i}`, `Enter a valid regular price for variant ${i + 1}.`);
      isValid = false;
    }

    if (!salePrice || isNaN(salePrice) || parseFloat(salePrice) <= 0 || parseFloat(salePrice) >= parseFloat(regularPrice)) {
      displayErrorMessage(`salePrice-error-${i}`, `Enter a valid sale price for variant ${i + 1} and it should be less than regular price.`);
      isValid = false;
    }

    if (!quantity || isNaN(quantity) || parseInt(quantity) <= 0) {
      displayErrorMessage(`quantity-error-${i}`, `Enter a valid quantity for variant ${i + 1}.`);
      isValid = false;
    }

    if (!color || !/^[a-zA-Z\s]+$/.test(color.trim())) {
      displayErrorMessage(`color-error-${i}`, `Color for variant ${i + 1} must be alphabetic.`);
      isValid = false;
    }
  }

  return isValid;
}

function displayErrorMessage(elementId, message) {
  const errorElement = document.getElementById(elementId);
  if (errorElement) {
    errorElement.innerText = message;
    errorElement.classList.add('show');
  }
}

function clearErrorMessages() {
  const errorElements = document.getElementsByClassName('error-message');
  Array.from(errorElements).forEach(element => {
    element.innerText = '';
    element.classList.remove('show');
  });
}

// Update the viewImage functions to be dynamic
<% 
  const remainingImageSlots = product.images ? (4 - product.images.length) : 4;
%>

<% for(let i = 1; i <= remainingImageSlots; i++) { %>
function viewImage<%= i %>(event) {
  const img = document.getElementById('imgView<%= i %>');
  const placeholder = document.getElementById('placeholder<%= i %>');
  const uploadArea = img.closest('.upload-area');
  
  if (img && placeholder && uploadArea) {
    img.src = URL.createObjectURL(event.target.files[0]);
    img.classList.remove('hidden');
    placeholder.classList.add('hidden');
    uploadArea.classList.add('has-image');
  }
}
<% } %>

function viewImage(event, index) {
  const input = event.target;
  const file = input.files[0];
  const reader = new FileReader();

  reader.onload = function () {
    const dataURL = reader.result;
    // Show the crop container
    const cropperContainer = document.querySelector(`#croppedImg${index}`).parentNode.parentNode;
    cropperContainer.classList.remove('hidden');
    
    // Set the image source in cropper image
    const cropImage = document.getElementById(`croppedImg${index}`);
    cropImage.src = dataURL;
    
    // Destroy existing cropper if already applied
    if (cropImage.cropper) {
      cropImage.cropper.destroy();
    }
    
    // Apply cropper on new image
    const cropper = new Cropper(cropImage, {
      aspectRatio: 1,
      viewMode: 1,
      autoCropArea: 1,
      background: false,
      zoomable: true
    });
    
    // Store cropper instance for later use
    cropImage.cropper = cropper;
    
    // Save cropped image on button click
    const saveButton = document.getElementById(`saveButton${index}`);
    saveButton.onclick = function () {
      const canvas = cropper.getCroppedCanvas();
      const croppedDataUrl = canvas.toDataURL('image/jpeg', 1.0);
      document.getElementById(`imgView${index}`).src = croppedDataUrl;
      // Hide cropper after saving
      cropperContainer.classList.add('hidden');
      
      // Show success notification
      showNotification('Image cropped successfully!', 'success');
    };
  };
  
  if (file) {
    reader.readAsDataURL(file);
  }
}

function cancelCrop(index) {
  const cropperContainer = document.querySelector(`#croppedImg${index}`).parentNode.parentNode;
  cropperContainer.classList.add('hidden');
  
  const cropImage = document.getElementById(`croppedImg${index}`);
  if (cropImage.cropper) {
    cropImage.cropper.destroy();
  }
}

const selectedImages = [];
document.querySelectorAll('input[type="file"]').forEach(inputElement => {
  inputElement.addEventListener("change", handleFileSelect);
});

function handleFileSelect(event) {
  const addedImagesContainer = document.getElementById("addedImagesContainer");
  if (addedImagesContainer) {
    addedImagesContainer.innerHTML = "";
    const files = event.target.files;
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      selectedImages.push(file);
      const thumbnail = document.createElement("div");
      thumbnail.classList.add("thumbnail");
      const img = document.createElement("img");
      img.src = URL.createObjectURL(file);
      img.alt = "thumbnail";
      img.style.width = "50px";
      img.style.height = "auto";
      const removeIcon = document.createElement("span");
      removeIcon.classList.add("remove-icon");
      removeIcon.innerHTML = "&times;";
      removeIcon.addEventListener("click", function () {
        const index = selectedImages.indexOf(file);
        if (index !== -1) {
          selectedImages.splice(index, 1);
        }
        thumbnail.remove();
      });
      thumbnail.appendChild(img);
      thumbnail.appendChild(removeIcon);
      addedImagesContainer.appendChild(thumbnail);
    }
  }
}

function deleteSingleImage(imageId, productId) {
  Swal.fire({
    title: 'Delete Image?',
    text: "This action cannot be undone. The image will be permanently removed from this product.",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#ef4444',
    cancelButtonColor: '#6b7280',
    confirmButtonText: '<i class="fas fa-trash-alt mr-2"></i>Yes, Delete',
    cancelButtonText: '<i class="fas fa-times mr-2"></i>Cancel',
    reverseButtons: true,
    customClass: {
      popup: 'rounded-lg shadow-2xl',
      title: 'text-gray-800 font-semibold',
      content: 'text-gray-600',
      confirmButton: 'rounded-lg px-6 py-3 font-medium shadow-lg hover:shadow-xl transition-all duration-200',
      cancelButton: 'rounded-lg px-6 py-3 font-medium shadow-lg hover:shadow-xl transition-all duration-200'
    },
    buttonsStyling: false,
    focusConfirm: false,
    focusCancel: true
  }).then((result) => {
    if (result.isConfirmed) {
      // Show loading state
      Swal.fire({
        title: 'Deleting Image...',
        text: 'Please wait while we remove the image.',
        icon: 'info',
        allowOutsideClick: false,
        allowEscapeKey: false,
        showConfirmButton: false,
        customClass: {
          popup: 'rounded-lg shadow-2xl'
        },
        didOpen: () => {
          Swal.showLoading();
        }
      });

      // Perform the deletion
      $.ajax({
        url: "/admin/deleteSingleImage",
        method: "POST",
        data: { imageNameToServer: imageId, productIdToServer: productId },
        success: ((response) => {
          if (response.status === true) {
            Swal.fire({
              title: 'Deleted!',
              text: 'The image has been successfully removed.',
              icon: 'success',
              confirmButtonColor: '#10b981',
              confirmButtonText: '<i class="fas fa-check mr-2"></i>OK',
              customClass: {
                popup: 'rounded-lg shadow-2xl',
                title: 'text-gray-800 font-semibold',
                content: 'text-gray-600',
                confirmButton: 'rounded-lg px-6 py-3 font-medium shadow-lg hover:shadow-xl transition-all duration-200'
              },
              buttonsStyling: false,
              timer: 2000,
              timerProgressBar: true
            }).then(() => {
              window.location.reload();
            });
          } else {
            Swal.fire({
              title: 'Error!',
              text: 'Failed to delete the image. Please try again.',
              icon: 'error',
              confirmButtonColor: '#ef4444',
              confirmButtonText: '<i class="fas fa-times mr-2"></i>OK',
              customClass: {
                popup: 'rounded-lg shadow-2xl',
                title: 'text-gray-800 font-semibold',
                content: 'text-gray-600',
                confirmButton: 'rounded-lg px-6 py-3 font-medium shadow-lg hover:shadow-xl transition-all duration-200'
              },
              buttonsStyling: false
            });
          }
        }),
        error: function() {
          Swal.fire({
            title: 'Error!',
            text: 'Something went wrong. Please check your connection and try again.',
            icon: 'error',
            confirmButtonColor: '#ef4444',
            confirmButtonText: '<i class="fas fa-times mr-2"></i>OK',
            customClass: {
              popup: 'rounded-lg shadow-2xl',
              title: 'text-gray-800 font-semibold',
              content: 'text-gray-600',
              confirmButton: 'rounded-lg px-6 py-3 font-medium shadow-lg hover:shadow-xl transition-all duration-200'
            },
            buttonsStyling: false
          });
        }
      });
    }
  });
}

function removeVariantField(button) {
  const variantBlock = button.closest('.border');
  if (variantBlock) {
    const allVariants = document.querySelectorAll('#variants-container .border');
    if (allVariants.length <= 1) {
      Swal.fire({
        title: 'Cannot Remove!',
        text: 'At least one variant is required for the product.',
        icon: 'warning',
        confirmButtonColor: '#f59e0b',
        confirmButtonText: '<i class="fas fa-check mr-2"></i>Understood',
        customClass: {
          popup: 'rounded-lg shadow-2xl',
          title: 'text-gray-800 font-semibold',
          content: 'text-gray-600',
          confirmButton: 'rounded-lg px-6 py-3 font-medium shadow-lg hover:shadow-xl transition-all duration-200'
        },
        buttonsStyling: false
      });
      return;
    }

    Swal.fire({
      title: 'Remove Variant?',
      text: "This will permanently remove this product variant and all its data.",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#ef4444',
      cancelButtonColor: '#6b7280',
      confirmButtonText: '<i class="fas fa-trash-alt mr-2"></i>Yes, Remove',
      cancelButtonText: '<i class="fas fa-times mr-2"></i>Cancel',
      reverseButtons: true,
      customClass: {
        popup: 'rounded-lg shadow-2xl',
        title: 'text-gray-800 font-semibold',
        content: 'text-gray-600',
        confirmButton: 'rounded-lg px-6 py-3 font-medium shadow-lg hover:shadow-xl transition-all duration-200',
        cancelButton: 'rounded-lg px-6 py-3 font-medium shadow-lg hover:shadow-xl transition-all duration-200'
      },
      buttonsStyling: false,
      focusConfirm: false,
      focusCancel: true
    }).then((result) => {
      if (result.isConfirmed) {
        variantBlock.remove();
        updateVariantNumbers();
        
        Swal.fire({
          title: 'Removed!',
          text: 'The variant has been successfully removed.',
          icon: 'success',
          confirmButtonColor: '#10b981',
          confirmButtonText: '<i class="fas fa-check mr-2"></i>OK',
          customClass: {
            popup: 'rounded-lg shadow-2xl',
            title: 'text-gray-800 font-semibold',
            content: 'text-gray-600',
            confirmButton: 'rounded-lg px-6 py-3 font-medium shadow-lg hover:shadow-xl transition-all duration-200'
          },
          buttonsStyling: false,
          timer: 1500,
          timerProgressBar: true
        });
      }
    });
  }
}

function updateVariantNumbers() {
  const variants = document.querySelectorAll('#variants-container .border');
  variants.forEach((variant, index) => {
    const title = variant.querySelector('h3');
    title.innerHTML = `<i class="fas fa-cube mr-2 text-indigo-500"></i> Variant ${index + 1}`;
  });
}

function showNotification(message, type = 'info') {
  const bgColor = type === 'success' ? 'bg-green-500' : 
                  type === 'error' ? 'bg-red-500' : 'bg-blue-500';
  
  const notification = document.createElement('div');
  notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 ${bgColor} text-white transform transition-all duration-300 translate-x-full`;
  notification.innerHTML = `
    <div class="flex items-center gap-2">
      <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
      ${message}
    </div>
  `;
  
  document.body.appendChild(notification);
  
  setTimeout(() => {
    notification.classList.remove('translate-x-full');
  }, 100);
  
  setTimeout(() => {
    notification.classList.add('translate-x-full');
    setTimeout(() => notification.remove(), 300);
  }, 3000);
}
</script>

<%- include("../../views/partials/admin/footer") %>
