<%- include('../partials/admin/header', { title: 'Admin Panel - Sales Report' }) %>

<!-- Additional libraries -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

<style>
  /* Same styling as coupon management */
  .bg-admin-gradient {
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
  }
  
  .bg-card-gradient {
    background: linear-gradient(145deg, #ffffff 0%, #f8fafc 100%);
  }

  .bg-header-gradient {
    background: linear-gradient(135deg, #1e293b 0%, #374151 50%, #4b5563 100%);
  }

  .bg-primary-gradient {
    background: linear-gradient(135deg, #374151 0%, #4b5563 100%);
  }

  .bg-secondary-gradient {
    background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%);
  }

  .bg-success-gradient {
    background: linear-gradient(135deg, #dcfce7 0%, #bbf7d0 100%);
  }

  .bg-danger-gradient {
    background: linear-gradient(135deg, #fef2f2 0%, #fecaca 100%);
  }

  .bg-warning-gradient {
    background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
  }

  /* Enhanced shadows */
  .shadow-gradient {
    box-shadow: 0 4px 15px -3px rgba(0, 0, 0, 0.1), 0 2px 6px -2px rgba(0, 0, 0, 0.05);
  }
  
  .shadow-gradient-lg {
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }

  /* Gradient text */
  .text-gradient {
    background: linear-gradient(135deg, #1e293b 0%, #374151 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  /* Button enhancements */
  .btn-primary {
    background: linear-gradient(135deg, #374151 0%, #4b5563 100%);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    font-size: 0.875rem;
  }
  
  .btn-primary:hover {
    background: linear-gradient(135deg, #1e293b 0%, #374151 100%);
    transform: translateY(-0.5px);
    box-shadow: 0 6px 10px -3px rgba(0, 0, 0, 0.1);
  }

  .btn-secondary {
    background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    font-size: 0.875rem;
  }
  
  .btn-secondary:hover {
    background: linear-gradient(135deg, #e2e8f0 0%, #cbd5e1 100%);
    transform: translateY(-0.5px);
  }

  /* Card hover effects */
  .card-hover {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .card-hover:hover {
    transform: translateY(-1px);
    box-shadow: 0 15px 20px -5px rgba(0, 0, 0, 0.08), 0 8px 8px -5px rgba(0, 0, 0, 0.03);
  }

  /* Animations */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(15px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes slideInUp {
    from {
      transform: translateY(20px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  .animate-fadeInUp {
    animation: fadeInUp 0.6s ease-out;
  }
  
  .animate-slideInUp {
    animation: slideInUp 0.5s ease-out;
  }

  /* Enhanced Filter buttons with dropdown */
  .filter-btn {
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    font-weight: 600;
    font-size: 0.875rem;
    transition: all 0.3s ease;
    border: 1px solid #e2e8f0;
    cursor: pointer;
    position: relative;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .filter-btn.active {
    background: linear-gradient(135deg, #374151 0%, #4b5563 100%);
    color: white;
    border-color: #374151;
  }

  .filter-btn:not(.active) {
    background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%);
    color: #374151;
  }

  .filter-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  /* Enhanced Dropdown Styles */
  .dropdown-container {
    position: relative;
    display: inline-block;
  }

  .dropdown-menu {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: linear-gradient(145deg, #ffffff 0%, #f8fafc 100%);
    border: 1px solid #e2e8f0;
    border-radius: 0.75rem;
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    padding: 0.5rem;
    z-index: 1000;
    opacity: 0;
    transform: translateY(-10px);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    pointer-events: none;
    max-height: 300px;
    overflow-y: auto;
    min-width: 200px;
    margin-top: 4px;
  }

  .dropdown-menu.show {
    opacity: 1;
    transform: translateY(0);
    pointer-events: all;
  }

  .dropdown-item {
    padding: 0.5rem 0.75rem;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    font-weight: 500;
    color: #374151;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: space-between;
    border: 1px solid transparent;
    margin-bottom: 2px;
  }

  .dropdown-item:hover {
    background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%);
    color: #1e293b;
    border-color: #cbd5e1;
  }

  .dropdown-item.selected {
    background: linear-gradient(135deg, #374151 0%, #4b5563 100%);
    color: white;
  }

  .dropdown-header {
    padding: 0.5rem 0.75rem;
    font-size: 0.75rem;
    font-weight: 700;
    text-transform: uppercase;
    color: #6b7280;
    letter-spacing: 0.05em;
    border-bottom: 1px solid #e5e7eb;
    margin-bottom: 0.5rem;
  }

  /* Scrollbar styling for dropdown */
  .dropdown-menu::-webkit-scrollbar {
    width: 6px;
  }

  .dropdown-menu::-webkit-scrollbar-track {
    background: #f1f5f9;
    border-radius: 3px;
  }

  .dropdown-menu::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 3px;
  }

  .dropdown-menu::-webkit-scrollbar-thumb:hover {
    background: #9ca3af;
  }

  /* Input styling */
  .input-field {
    background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%);
    border: 1px solid #cbd5e1;
    border-radius: 0.75rem;
    padding: 0.75rem 1rem;
    color: #1e293b;
    font-weight: 500;
    transition: all 0.3s ease;
    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.05);
  }

  .input-field:focus {
    border-color: #374151;
    outline: none;
    box-shadow: 0 0 0 3px rgba(55, 65, 81, 0.1);
    background: #ffffff;
  }

  /* Metrics cards */
  .metrics-card {
    background: linear-gradient(145deg, #ffffff 0%, #f8fafc 100%);
    border-radius: 1rem;
    box-shadow: 0 4px 15px -3px rgba(0, 0, 0, 0.1), 0 2px 6px -2px rgba(0, 0, 0, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.3);
    padding: 1.5rem;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
  }

  .metrics-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 15px 20px -5px rgba(0, 0, 0, 0.08), 0 8px 8px -5px rgba(0, 0, 0, 0.03);
  }

  .metrics-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: var(--accent-gradient);
  }

  .metrics-card.sales::before {
    --accent-gradient: linear-gradient(90deg, #3b82f6, #1d4ed8);
  }

  .metrics-card.orders::before {
    --accent-gradient: linear-gradient(90deg, #10b981, #047857);
  }

  .metrics-card.discount::before {
    --accent-gradient: linear-gradient(90deg, #f59e0b, #d97706);
  }

  /* Enhanced Table styling - NON-SCROLLABLE */
  .sales-table-container {
    overflow: visible;
    position: relative;
  }

  .sales-table-row {
    border-left: 4px solid transparent;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .sales-table-row:hover {
    background-color: #eff6ff !important;
    border-left: 4px solid #3b82f6 !important;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  }

  /* Status badges */
  .status-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
  }

  .status-badge.delivered {
    background: linear-gradient(135deg, #dcfce7 0%, #bbf7d0 100%);
    color: #065f46;
    border: 1px solid #a7f3d0;
  }

  .status-badge.processing {
    background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
    color: #92400e;
    border: 1px solid #fcd34d;
  }

  .status-badge.cancelled {
    background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);
    color: #991b1b;
    border: 1px solid #fca5a5;
  }

  .status-badge.pending {
    background: linear-gradient(135deg, #ddd6fe 0%, #c7d2fe 100%);
    color: #5b21b6;
    border: 1px solid #c4b5fd;
  }

  .status-badge.returned {
    background: linear-gradient(135deg, #f3e8ff 0%, #e9d5ff 100%);
    color: #7c3aed;
    border: 1px solid #d8b4fe;
  }

  /* Download button styles */
  .btn-download {
    color: white;
    border: none;
    border-radius: 0.75rem;
    padding: 0.75rem 1.5rem;
    font-weight: 600;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  .btn-download:hover {
    transform: translateY(-1px);
  }

  .btn-pdf {
    background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);
    box-shadow: 0 4px 15px -3px rgba(220, 38, 38, 0.4);
  }

  .btn-pdf:hover {
    background: linear-gradient(135deg, #b91c1c 0%, #991b1b 100%);
    box-shadow: 0 8px 25px -3px rgba(220, 38, 38, 0.6);
  }

  .btn-excel {
    background: linear-gradient(135deg, #16a34a 0%, #15803d 100%);
    box-shadow: 0 4px 15px -3px rgba(22, 163, 74, 0.4);
  }

  .btn-excel:hover {
    background: linear-gradient(135deg, #15803d 0%, #166534 100%);
    box-shadow: 0 8px 25px -3px rgba(22, 163, 74, 0.6);
  }

  /* Loading overlay */
  .loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
  }

  .loading-spinner {
    width: 40px;
    height: 40px;
    border: 4px solid #f3f4f6;
    border-top: 4px solid #3b82f6;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  /* Enhanced Pagination Styles */
  .pagination-container {
    display: flex;
    align-items: center;
    gap: 8px;
    flex-wrap: wrap;
  }

  .pagination-btn {
    padding: 8px 14px;
    font-size: 14px;
    font-weight: 500;
    border: 1px solid #e5e7eb;
    background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%);
    color: #374151;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    user-select: none;
    position: relative;
    overflow: hidden;
  }

  .pagination-btn:hover:not(:disabled):not(.active) {
    background: linear-gradient(135deg, #e2e8f0 0%, #cbd5e1 100%);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    transform: translateY(-2px);
  }

  .pagination-btn.active {
    background: linear-gradient(135deg, #374151 0%, #4b5563 100%);
    color: white;
    border-color: #374151;
    box-shadow: 0 4px 12px rgba(55, 65, 81, 0.3);
  }

  .pagination-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  /* Responsive table adjustments */
  @media (max-width: 768px) {
    .sales-table-container {
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
    }
    
    .filter-btn {
      font-size: 0.8rem;
      padding: 0.4rem 0.8rem;
    }
    
    .dropdown-menu {
      min-width: 180px;
    }
  }

  @media (max-width: 640px) {
    .pagination-container {
      justify-content: center;
    }
  }
</style>

<!-- Main content -->
<div class="p-3 sm:p-4 lg:p-6 bg-admin-gradient min-h-screen">
  <div class="max-w-7xl mx-auto">
    
    <!-- Page Header -->
    <div class="mb-4 sm:mb-6 animate-fadeInUp">
      <div class="bg-card-gradient rounded-lg sm:rounded-xl p-3 sm:p-4 lg:p-6 shadow-gradient-lg card-hover border border-white/20">
        <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-3 lg:gap-4">
          <div class="flex-1">
            <h1 class="text-xl sm:text-2xl lg:text-3xl font-bold text-gradient mb-1 sm:mb-2" style="font-family: 'Raleway', sans-serif;">
              Sales Report Dashboard
            </h1>
            <p class="text-gray-600 text-xs sm:text-sm lg:text-base">Comprehensive sales analytics with discount tracking and export capabilities</p>
            <div class="flex items-center gap-2 mt-1 sm:mt-2">
              <div class="w-1.5 h-1.5 bg-primary-gradient rounded-full animate-pulse"></div>
              <span class="text-xs text-gray-500 font-medium">Real-time data analytics</span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Filter Controls -->
    <div class="mb-6 animate-slideInUp" style="animation-delay: 0.1s;">
      <div class="bg-card-gradient rounded-lg sm:rounded-xl shadow-gradient-lg border border-white/20 overflow-visible">
        
        <!-- Filter Header -->
        <div class="px-3 sm:px-4 lg:px-6 py-3 sm:py-4 bg-header-gradient">
          <div class="flex items-center justify-between">
            <div>
              <h3 class="text-base sm:text-lg font-bold text-white mb-0.5">Report Filters</h3>
              <p class="text-gray-300 text-xs">Configure your sales report parameters</p>
            </div>
          </div>
        </div>

        <!-- Filter Content -->
        <div class="p-3 sm:p-4 lg:p-6">
          <div class="grid grid-cols-1 lg:grid-cols-12 gap-4 items-end">
            
            <!-- Period Filters with Click-based Dropdowns -->
            <div class="lg:col-span-6">
              <label class="block text-xs font-bold text-gray-700 mb-3 uppercase tracking-wide">Time Period</label>
              <div class="flex gap-2 flex-wrap">
                
                <!-- Daily Filter with Dropdown -->
                <div class="dropdown-container">
                  <button class="filter-btn active" data-filter="daily" onclick="toggleDropdown('daily')">
                    <span>Daily</span>
                    <i class="fas fa-chevron-down text-xs"></i>
                  </button>
                  <div class="dropdown-menu" id="dailyDropdown">
                    <div class="dropdown-header">Select Day</div>
                    <div id="dailyOptions">
                      <!-- Generated by JavaScript -->
                    </div>
                  </div>
                </div>

                <!-- Weekly Filter with Dropdown -->
                <div class="dropdown-container">
                  <button class="filter-btn" data-filter="weekly" onclick="toggleDropdown('weekly')">
                    <span>Weekly</span>
                    <i class="fas fa-chevron-down text-xs"></i>
                  </button>
                  <div class="dropdown-menu" id="weeklyDropdown">
                    <div class="dropdown-header">Select Week</div>
                    <div id="weeklyOptions">
                      <!-- Generated by JavaScript -->
                    </div>
                  </div>
                </div>

                <!-- Monthly Filter with Dropdown -->
                <div class="dropdown-container">
                  <button class="filter-btn" data-filter="monthly" onclick="toggleDropdown('monthly')">
                    <span>Monthly</span>
                    <i class="fas fa-chevron-down text-xs"></i>
                  </button>
                  <div class="dropdown-menu" id="monthlyDropdown">
                    <div class="dropdown-header">Select Month</div>
                    <div id="monthlyOptions">
                      <!-- Generated by JavaScript -->
                    </div>
                  </div>
                </div>

                <!-- Yearly Filter with Dropdown -->
                <div class="dropdown-container">
                  <button class="filter-btn" data-filter="yearly" onclick="toggleDropdown('yearly')">
                    <span>Yearly</span>
                    <i class="fas fa-chevron-down text-xs"></i>
                  </button>
                  <div class="dropdown-menu" id="yearlyDropdown">
                    <div class="dropdown-header">Select Year</div>
                    <div id="yearlyOptions">
                      <!-- Generated by JavaScript -->
                    </div>
                  </div>
                </div>

                <!-- Custom Filter -->
                <button class="filter-btn" data-filter="custom" onclick="updatePeriod('custom')">
                  <span>Custom</span>
                  <i class="fas fa-calendar-alt text-xs"></i>
                </button>
              </div>
            </div>

            <!-- Custom Date Range -->
            <div class="lg:col-span-4" id="customDateRange" style="display: none;">
              <div class="grid grid-cols-2 gap-2">
                <div>
                  <label class="block text-xs font-bold text-gray-700 mb-2 uppercase tracking-wide">From</label>
                  <input type="date" id="startDate" class="input-field w-full text-sm">
                </div>
                <div>
                  <label class="block text-xs font-bold text-gray-700 mb-2 uppercase tracking-wide">To</label>
                  <input type="date" id="endDate" class="input-field w-full text-sm">
                </div>
              </div>
            </div>

            <!-- Generate Report Button -->
            <div class="lg:col-span-2">
              <button onclick="generateReport()" class="btn-primary w-full py-3 px-4 rounded-lg font-semibold flex items-center justify-center gap-2">
                <i class="fas fa-chart-line"></i>
                <span>Generate Report</span>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Metrics Cards -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6 animate-slideInUp" style="animation-delay: 0.2s;">
      
      <!-- Total Sales -->
      <div class="metrics-card sales">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-xs font-bold text-gray-600 uppercase tracking-wider mb-1">Total Sales Amount</p>
            <p class="text-2xl font-bold text-gradient" id="totalSales">₹0</p>
            <p class="text-xs text-gray-500 mt-1">
              <span class="text-green-600 font-semibold" id="salesChange">+0%</span> from last period
            </p>
          </div>
          <div class="w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center">
            <i class="fas fa-rupee-sign text-blue-600 text-xl"></i>
          </div>
        </div>
      </div>

      <!-- Total Orders -->
      <div class="metrics-card orders">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-xs font-bold text-gray-600 uppercase tracking-wider mb-1">Total Orders</p>
            <p class="text-2xl font-bold text-gradient" id="totalOrders">0</p>
            <p class="text-xs text-gray-500 mt-1">
              <span class="text-green-600 font-semibold" id="ordersChange">+0%</span> from last period
            </p>
          </div>
          <div class="w-12 h-12 bg-green-100 rounded-xl flex items-center justify-center">
            <i class="fas fa-shopping-cart text-green-600 text-xl"></i>
          </div>
        </div>
      </div>

      <!-- Total Discounts -->
      <div class="metrics-card discount">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-xs font-bold text-gray-600 uppercase tracking-wider mb-1">Total Discounts Given</p>
            <p class="text-2xl font-bold text-gradient" id="totalDiscounts">₹0</p>
            <p class="text-xs text-gray-500 mt-1">
              <span class="text-orange-600 font-semibold" id="discountChange">+0%</span> from last period
            </p>
          </div>
          <div class="w-12 h-12 bg-orange-100 rounded-xl flex items-center justify-center">
            <i class="fas fa-percentage text-orange-600 text-xl"></i>
          </div>
        </div>
      </div>
    </div>

    <!-- Sales Report Table -->
    <div class="animate-slideInUp" style="animation-delay: 0.3s;">
      <div class="bg-card-gradient rounded-lg sm:rounded-xl shadow-gradient-lg border border-white/20 overflow-hidden">
        
        <!-- Table Header -->
        <div class="px-3 sm:px-4 lg:px-6 py-3 sm:py-4 bg-header-gradient">
          <div class="flex items-center justify-between">
            <div>
              <h3 class="text-base sm:text-lg font-bold text-white mb-0.5">Sales Report Table</h3>
              <p class="text-gray-300 text-xs">Detailed breakdown of sales data</p>
            </div>
            <div class="flex items-center gap-1.5">
              <div class="w-1.5 h-1.5 bg-green-400 rounded-full animate-pulse"></div>
              <span class="text-gray-300 text-xs">Live Data</span>
            </div>
          </div>
        </div>

        <!-- Table Container (Non-scrollable) -->
        <div class="sales-table-container">
          <table class="w-full" id="salesTable">
            <thead class="bg-secondary-gradient border-b border-gray-200">
              <tr>
                <th class="px-2 sm:px-3 lg:px-4 py-2 sm:py-3 text-left text-xs font-bold text-gray-700 uppercase tracking-wider">Date</th>
                <th class="px-2 sm:px-3 lg:px-4 py-2 sm:py-3 text-left text-xs font-bold text-gray-700 uppercase tracking-wider">Order ID</th>
                <th class="px-2 sm:px-3 lg:px-4 py-2 sm:py-3 text-left text-xs font-bold text-gray-700 uppercase tracking-wider">Order Items</th>
                <th class="px-2 sm:px-3 lg:px-4 py-2 sm:py-3 text-left text-xs font-bold text-gray-700 uppercase tracking-wider">Total Amount</th>
                <th class="px-2 sm:px-3 lg:px-4 py-2 sm:py-3 text-left text-xs font-bold text-gray-700 uppercase tracking-wider">Discount</th>
                <th class="px-2 sm:px-3 lg:px-4 py-2 sm:py-3 text-left text-xs font-bold text-gray-700 uppercase tracking-wider">Final Amount</th>
                <th class="px-2 sm:px-3 lg:px-4 py-2 sm:py-3 text-left text-xs font-bold text-gray-700 uppercase tracking-wider">Order Status</th>
              </tr>
            </thead>
            <tbody class="divide-y divide-gray-100" id="salesTableBody">
              <!-- Sales data will be populated here -->
            </tbody>
          </table>
        </div>

        <!-- Pagination Controls -->
        <div class="px-3 sm:px-4 lg:px-6 py-3 sm:py-4 bg-secondary-gradient border-t border-gray-200">
          <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3">
            <!-- Results Info -->
            <div class="text-xs sm:text-sm text-gray-600 font-medium">
              <span id="paginationInfo">Showing results</span>
            </div>
            
            <!-- Pagination Controls -->
            <div class="pagination-container">
              <button 
                id="prevPageBtn" 
                class="pagination-btn"
                onclick="changePage(currentPage - 1)"
                disabled>
                <i class="fas fa-chevron-left text-xs mr-1"></i>
                <span class="hidden sm:inline">Previous</span>
              </button>
              
              <div id="paginationNumbers" class="flex gap-1">
                <!-- Page numbers will be populated by JavaScript -->
              </div>
              
              <button 
                id="nextPageBtn" 
                class="pagination-btn"
                onclick="changePage(currentPage + 1)"
                disabled>
                <span class="hidden sm:inline">Next</span>
                <i class="fas fa-chevron-right text-xs ml-1"></i>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Export Section -->
    <div class="mt-6 animate-slideInUp" style="animation-delay: 0.4s;">
      <div class="bg-card-gradient rounded-lg sm:rounded-xl p-4 sm:p-6 shadow-gradient-lg border border-white/20">
        <div class="text-center">
          <h3 class="text-lg font-bold text-gradient mb-2">Export Sales Report</h3>
          <p class="text-gray-600 text-sm mb-6">Download your sales report in your preferred format</p>
          
          <div class="flex justify-center gap-4 flex-wrap">
            <button onclick="exportReport('pdf')" class="btn-download btn-pdf">
              <i class="fas fa-file-pdf"></i>
              <span>Export PDF</span>
            </button>
            <button onclick="exportReport('excel')" class="btn-download btn-excel">
              <i class="fas fa-file-excel"></i>
              <span>Export Excel</span>
            </button>
          </div>
          
          <p class="text-xs text-gray-500 mt-4">
            <i class="fas fa-info-circle mr-1"></i>
            Exports will include all data based on your current filter selection
          </p>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Loading Overlay -->
<div id="loadingOverlay" class="loading-overlay" style="display: none;">
  <div class="bg-white rounded-xl p-6 text-center shadow-2xl">
    <div class="loading-spinner mx-auto mb-4"></div>
    <p class="text-gray-600 font-medium">Generating report...</p>
    <p class="text-xs text-gray-500 mt-2">Please wait while we process your data</p>
  </div>
</div>

<script>
// Global variables
let currentPeriod = 'daily';
let currentPage = 1;
let totalPages = 1;
let currentFilters = {
  period: 'daily',
  startDate: null,
  endDate: null,
  selectedValue: null
};
let salesData = [];
let activeDropdown = null;

// Initialize everything when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
  generateDropdownOptions();
  setupGlobalClickListener();
  generateReport(); // Load initial data
});

// Setup global click listener for closing dropdowns
function setupGlobalClickListener() {
  document.addEventListener('click', function(event) {
    const clickedElement = event.target.closest('.dropdown-container, .filter-btn');
    if (!clickedElement && activeDropdown) {
      hideAllDropdowns();
    }
  });
}

// TIMEZONE FIX: Helper function to create local date without timezone conversion
function createLocalDate(year, month, day, hour = 0, minute = 0, second = 0, millisecond = 0) {
  const date = new Date(year, month, day, hour, minute, second, millisecond);
  return date;
}

// TIMEZONE FIX: Helper function to convert local date to UTC string for backend
function toUTCString(date) {
  // Create a new date in UTC that represents the same local date/time
  const utcDate = new Date(Date.UTC(
    date.getFullYear(),
    date.getMonth(),
    date.getDate(),
    date.getHours(),
    date.getMinutes(),
    date.getSeconds(),
    date.getMilliseconds()
  ));
  return utcDate.toISOString();
}

// Generate dropdown options for different periods
function generateDropdownOptions() {
  generateDailyOptions();
  generateWeeklyOptions();
  generateMonthlyOptions();
  generateYearlyOptions();
}

// Generate daily options (current month days - only past and present)
function generateDailyOptions() {
  const container = document.getElementById('dailyOptions');
  const now = new Date();
  const currentMonth = now.getMonth();
  const currentYear = now.getFullYear();
  const currentDay = now.getDate();
  
  container.innerHTML = '';
  
  for (let day = 1; day <= currentDay; day++) {
    const date = new Date(currentYear, currentMonth, day);
    const isToday = day === currentDay;
    
    const item = document.createElement('div');
    item.className = `dropdown-item ${isToday ? 'selected' : ''}`;
    item.innerHTML = `
      <span>${day} ${date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' })}</span>
      ${isToday ? '<i class="fas fa-circle text-xs text-green-500"></i>' : ''}
    `;
    item.onclick = () => selectDay(day, currentMonth, currentYear);
    container.appendChild(item);
  }
}

// Generate weekly options with proper month boundaries
function generateWeeklyOptions() {
  const container = document.getElementById('weeklyOptions');
  const now = new Date();
  const currentMonth = now.getMonth();
  const currentYear = now.getFullYear();
  const currentDay = now.getDate();
  
  container.innerHTML = '';
  
  // Get all weeks in current month up to current date
  const weeks = getWeeksInCurrentMonthFixed(currentYear, currentMonth, currentDay);
  
  weeks.forEach((week, index) => {
    const isCurrentWeek = week.containsToday;
    const weekNumber = index + 1; // Week 1, 2, 3, etc.
    
    const item = document.createElement('div');
    item.className = `dropdown-item ${isCurrentWeek ? 'selected' : ''}`;
    item.innerHTML = `
      <span>Week ${weekNumber} (${week.startDay}-${week.endDay} ${getMonthName(currentMonth)})</span>
      ${isCurrentWeek ? '<i class="fas fa-circle text-xs text-green-500"></i>' : ''}
    `;
    item.onclick = () => selectWeek(weekNumber, week.startDate, week.endDate);
    container.appendChild(item);
  });
}

// Generate monthly options (current year months - only past and present)
function generateMonthlyOptions() {
  const container = document.getElementById('monthlyOptions');
  const now = new Date();
  const currentMonth = now.getMonth();
  const currentYear = now.getFullYear();
  
  container.innerHTML = '';
  
  const months = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
  ];
  
  for (let month = 0; month <= currentMonth; month++) {
    const isCurrentMonth = month === currentMonth;
    const item = document.createElement('div');
    item.className = `dropdown-item ${isCurrentMonth ? 'selected' : ''}`;
    item.innerHTML = `
      <span>${months[month]} ${currentYear}</span>
      ${isCurrentMonth ? '<i class="fas fa-circle text-xs text-green-500"></i>' : ''}
    `;
    item.onclick = () => selectMonth(month, currentYear);
    container.appendChild(item);
  }
}

// Generate yearly options (past and current years only)
function generateYearlyOptions() {
  const container = document.getElementById('yearlyOptions');
  const currentYear = new Date().getFullYear();
  const startYear = currentYear - 5; // Show last 5 years
  
  container.innerHTML = '';
  
  for (let year = currentYear; year >= startYear; year--) {
    const isCurrentYear = year === currentYear;
    const item = document.createElement('div');
    item.className = `dropdown-item ${isCurrentYear ? 'selected' : ''}`;
    item.innerHTML = `
      <span>${year}</span>
      ${isCurrentYear ? '<i class="fas fa-circle text-xs text-green-500"></i>' : ''}
    `;
    item.onclick = () => selectYear(year);
    container.appendChild(item);
  }
}

// Toggle dropdown visibility
function toggleDropdown(period) {
  if (activeDropdown === period) {
    hideAllDropdowns();
    return;
  }
  
  hideAllDropdowns();
  const dropdown = document.getElementById(`${period}Dropdown`);
  dropdown.classList.add('show');
  activeDropdown = period;
}

// Hide all dropdowns
function hideAllDropdowns() {
  const dropdowns = document.querySelectorAll('.dropdown-menu');
  dropdowns.forEach(dropdown => dropdown.classList.remove('show'));
  activeDropdown = null;
}

// FIXED: Enhanced Selection functions with proper timezone handling
function selectDay(day, month, year) {
  // Create local date without timezone conversion issues
  const selectedDate = createLocalDate(year, month, day, 0, 0, 0, 0);
  const endOfDay = createLocalDate(year, month, day, 23, 59, 59, 999);
  
  console.log(`Selected Day: ${day}/${month + 1}/${year}`);
  console.log(`Local Start Date: ${selectedDate}`);
  console.log(`Local End Date: ${endOfDay}`);
  
  const dateValue = {
    type: 'day',
    selectedDate: selectedDate,
    startDate: selectedDate,
    endDate: endOfDay
  };
  
  updatePeriod('daily', dateValue);
  hideAllDropdowns();
}

function selectWeek(weekNumber, startDate, endDate) {
  const weekValue = {
    type: 'week',
    weekNumber: weekNumber,
    selectedDate: startDate,
    startDate: startDate,
    endDate: endDate
  };
  
  console.log(`Selected Week: ${weekNumber}`);
  console.log(`Week Start: ${startDate}`);
  console.log(`Week End: ${endDate}`);
  
  updatePeriod('weekly', weekValue);
  hideAllDropdowns();
}

// FIXED: Month selection with proper timezone handling
function selectMonth(month, year) {
  // Create local dates without timezone conversion
  const firstDay = createLocalDate(year, month, 1, 0, 0, 0, 0);
  const lastDay = createLocalDate(year, month + 1, 0, 23, 59, 59, 999);
  
  console.log(`Selected Month: ${month + 1}/${year}`);
  console.log(`Month Start: ${firstDay}`);
  console.log(`Month End: ${lastDay}`);
  
  const monthValue = {
    type: 'month',
    month: month,
    year: year,
    selectedDate: firstDay,
    startDate: firstDay,
    endDate: lastDay
  };
  
  updatePeriod('monthly', monthValue);
  hideAllDropdowns();
}

// FIXED: Year selection with proper timezone handling
function selectYear(year) {
  // Create local dates without timezone conversion
  const firstDay = createLocalDate(year, 0, 1, 0, 0, 0, 0);
  const lastDay = createLocalDate(year, 11, 31, 23, 59, 59, 999);
  
  console.log(`Selected Year: ${year}`);
  console.log(`Year Start: ${firstDay}`);
  console.log(`Year End: ${lastDay}`);
  
  const yearValue = {
    type: 'year',
    year: year,
    selectedDate: firstDay,
    startDate: firstDay,
    endDate: lastDay
  };
  
  updatePeriod('yearly', yearValue);
  hideAllDropdowns();
}

// Helper function to get weeks in current month with proper boundaries and timezone handling
function getWeeksInCurrentMonthFixed(year, month, currentDay) {
  const weeks = [];
  const lastDayOfMonth = new Date(year, month + 1, 0).getDate();
  
  let weekStart = 1;
  let weekNumber = 1;
  
  while (weekStart <= currentDay) {
    // Week ends on the 7th day or last day of month or current day, whichever is earliest
    const weekEnd = Math.min(weekStart + 6, lastDayOfMonth, currentDay);
    
    // Create start and end dates with proper time boundaries (no timezone conversion)
    const startDate = createLocalDate(year, month, weekStart, 0, 0, 0, 0);
    const endDate = createLocalDate(year, month, weekEnd, 23, 59, 59, 999);
    
    const containsToday = currentDay >= weekStart && currentDay <= weekEnd;
    
    weeks.push({
      weekNumber: weekNumber,
      startDay: weekStart,
      endDay: weekEnd,
      startDate: startDate,
      endDate: endDate,
      containsToday: containsToday
    });
    
    weekStart = weekEnd + 1;
    weekNumber++;
    
    // If we've reached the end of the month or current day, stop
    if (weekEnd >= currentDay || weekEnd >= lastDayOfMonth) {
      break;
    }
  }
  
  return weeks;
}

function getMonthName(monthIndex) {
  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
  return months[monthIndex];
}

// Update period filter
function updatePeriod(period, selectedValue = null) {
  // Update active filter button
  document.querySelectorAll('.filter-btn').forEach(btn => {
    btn.classList.remove('active');
  });
  document.querySelector(`[data-filter="${period}"]`).classList.add('active');
  
  currentPeriod = period;
  currentFilters.period = period;
  currentFilters.selectedValue = selectedValue;
  currentPage = 1; // Reset to first page

  // Show/hide custom date range
  const customDateRange = document.getElementById('customDateRange');
  if (period === 'custom') {
    customDateRange.style.display = 'block';
  } else {
    customDateRange.style.display = 'none';
    generateReport(); // Auto-generate for preset periods
  }
}

// FIXED: Enhanced Generate report with proper timezone handling
async function generateReport() {
  if (currentPeriod === 'custom') {
    const startDateInput = document.getElementById('startDate').value;
    const endDateInput = document.getElementById('endDate').value;
    
    if (!startDateInput || !endDateInput) {
      showNotification('Please select both start and end dates for custom range', 'error');
      return;
    }
    
    if (new Date(startDateInput) > new Date(endDateInput)) {
      showNotification('Start date cannot be after end date', 'error');
      return;
    }
    
    // Parse custom dates and set proper time boundaries
    const [startYear, startMonth, startDay] = startDateInput.split('-').map(Number);
    const [endYear, endMonth, endDay] = endDateInput.split('-').map(Number);
    
    currentFilters.startDate = createLocalDate(startYear, startMonth - 1, startDay, 0, 0, 0, 0);
    currentFilters.endDate = createLocalDate(endYear, endMonth - 1, endDay, 23, 59, 59, 999);
  }

  try {
    showLoadingOverlay(true);
    
    const params = new URLSearchParams({
      filter: currentPeriod,
      page: currentPage,
      limit: 10, // Orders per page
    });

    // Add dates as properly formatted UTC strings for backend processing
    if (currentPeriod === 'custom') {
      params.append('startDate', toUTCString(currentFilters.startDate));
      params.append('endDate', toUTCString(currentFilters.endDate));
      console.log('Custom Date Range:');
      console.log('Start:', currentFilters.startDate, '-> UTC:', toUTCString(currentFilters.startDate));
      console.log('End:', currentFilters.endDate, '-> UTC:', toUTCString(currentFilters.endDate));
    }

    // Add specific date parameters for dropdown selections
    if (currentFilters.selectedValue) {
      const selectedValue = currentFilters.selectedValue;
      
      // Convert local dates to UTC strings for backend
      const selectedDateUTC = toUTCString(selectedValue.selectedDate);
      const startDateUTC = toUTCString(selectedValue.startDate);
      const endDateUTC = toUTCString(selectedValue.endDate);
      
      params.append('selectedDate', selectedDateUTC);
      params.append('startDate', startDateUTC);
      params.append('endDate', endDateUTC);
      
      console.log('Selected Date Range:');
      console.log('Type:', selectedValue.type);
      console.log('Local Start:', selectedValue.startDate, '-> UTC:', startDateUTC);
      console.log('Local End:', selectedValue.endDate, '-> UTC:', endDateUTC);
      
      if (selectedValue.type === 'week') {
        params.append('weekNumber', selectedValue.weekNumber);
      }
      if (selectedValue.type === 'month') {
        params.append('month', selectedValue.month);
        params.append('year', selectedValue.year);
      }
      if (selectedValue.type === 'year') {
        params.append('year', selectedValue.year);
      }
    }
    
   // console.log('Sending to backend:', Object.fromEntries(params));
    
    const response = await fetch(`/admin/api/sales-report?${params}`);
    const result = await response.json();
    
    if (result.success) {
      salesData = result.data;
      updateTable(result.data.reportRes.orders || []);
      updateMetrics(result.data.reportRes.summary);
      updatePagination(result.data.pagination);
      showNotification('Sales report generated successfully!', 'success');
    } else {
      showNotification('Failed to generate report', 'error');
    }
  } catch (error) {
    console.error('Generate report error:', error);
    showNotification('Error generating report', 'error');
  } finally {
    showLoadingOverlay(false);
  }
}

// Update table with order data
function updateTable(orders) {
  const tbody = document.getElementById('salesTableBody');
  tbody.innerHTML = '';
  
  if (!orders || orders.length === 0) {
    tbody.innerHTML = `
      <tr>
        <td colspan="7" class="px-3 sm:px-4 py-12 sm:py-16 text-center">
          <div class="flex flex-col items-center animate-popIn">
            <div class="w-12 sm:w-16 h-12 sm:h-16 bg-secondary-gradient rounded-full flex items-center justify-center mb-3 sm:mb-4 shadow-gradient">
              <i class="fas fa-shopping-cart text-gray-400 text-xl sm:text-2xl"></i>
            </div>
            <h3 class="text-base sm:text-lg font-bold text-gradient mb-1 sm:mb-2">No orders found</h3>
            <p class="text-gray-500 mb-4 sm:mb-6 max-w-md text-center leading-relaxed text-xs sm:text-sm px-4">
              No sales data available for the selected time period. Try adjusting your filters.
            </p>
            <button onclick="updatePeriod('daily')" class="btn-primary px-4 sm:px-6 py-2 sm:py-3 text-white font-medium rounded-lg shadow-gradient text-xs sm:text-sm">
              Reset to Daily View
            </button>
          </div>
        </td>
      </tr>
    `;
    return;
  }

  orders.forEach((order, index) => {
    const row = document.createElement('tr');
    row.className = 'sales-table-row';
    
    // Calculate order items count and total
    const itemCount = order.orderitems ? order.orderitems.length : 0;
    const itemNames = order.orderitems ? order.orderitems.slice(0, 2).map(item => item.product?.productName || 'Unknown Product').join(', ') + (order.orderitems.length > 2 ? '...' : '') : '';
    
    // Status badge
    const getStatusBadge = (status) => {
      const statusClasses = {
        'Delivered': 'delivered',
        'Processing': 'processing',
        'Cancelled': 'cancelled',
        'Pending': 'pending',
        'Return Request': 'pending',
        'Returned': 'returned'
      };
      
      const statusIcons = {
        'Delivered': 'fa-check-circle',
        'Processing': 'fa-clock',
        'Cancelled': 'fa-times-circle',
        'Pending': 'fa-hourglass-half',
        'Return Request': 'fa-undo',
        'Returned': 'fa-undo-alt'
      };
      
      return `<span class="status-badge ${statusClasses[status] || 'pending'}">
        <i class="fas ${statusIcons[status] || 'fa-hourglass-half'}"></i>
        ${status}
      </span>`;
    };
    
    row.innerHTML = `
      <td class="px-2 sm:px-3 lg:px-4 py-3">
        <div class="flex flex-col">
          <span class="font-semibold text-gray-900 text-sm">${new Date(order.createdOn).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}</span>
          <span class="text-xs text-gray-500">${new Date(order.createdOn).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}</span>
        </div>
      </td>
      <td class="px-2 sm:px-3 lg:px-4 py-3">
        <div class="flex items-center">
          <div class="w-2 h-2 bg-blue-500 rounded-full mr-2"></div>
          <span class="font-bold text-sm text-gradient">#${order.orderId?.slice(-6) || order._id?.slice(-6) || 'N/A'}</span>
        </div>
      </td>
      <td class="px-2 sm:px-3 lg:px-4 py-3">
        <div class="flex flex-col">
          <span class="font-semibold text-sm">${itemCount} item${itemCount !== 1 ? 's' : ''}</span>
          <span class="text-xs text-gray-500 truncate max-w-xs" title="${itemNames}">${itemNames || 'No items'}</span>
        </div>
      </td>
      <td class="px-2 sm:px-3 lg:px-4 py-3">
        <div class="font-bold text-green-600 text-sm">₹${(order.totalPrice || 0).toLocaleString()}</div>
      </td>
      <td class="px-2 sm:px-3 lg:px-4 py-3">
        <div class="font-bold text-orange-600 text-sm">₹${(order.couponDiscount || 0).toLocaleString()}</div>
      </td>
      <td class="px-2 sm:px-3 lg:px-4 py-3">
        <div class="font-bold text-blue-600 text-sm">₹${(order.finalAmount || (order.totalPrice - (order.couponDiscount || 0))).toLocaleString()}</div>
      </td>
      <td class="px-2 sm:px-3 lg:px-4 py-3">
        ${getStatusBadge(order.orderStatus || 'Pending')}
      </td>
    `;
    
    tbody.appendChild(row);
  });
}

// Update metrics cards
function updateMetrics(summaryData) {
  if (!summaryData) return;
  
  console.log('Summary Data:', summaryData);
  
  // Update main values
  document.getElementById('totalSales').textContent = '₹' + (summaryData.totalAmount || 0).toLocaleString();
  document.getElementById('totalOrders').textContent = (summaryData.totalOrders || 0).toLocaleString();
  document.getElementById('totalDiscounts').textContent = '₹' + (summaryData.totalDiscount || 0).toLocaleString();
  
  // Update growth percentages with proper formatting and colors
  const updateGrowthDisplay = (elementId, growth) => {
    const element = document.getElementById(elementId);
    const absGrowth = Math.abs(growth || 0);
    
    if (growth > 0) {
      element.innerHTML = `<span class="text-green-600 font-semibold">+${absGrowth}%</span> from last period`;
      element.querySelector('span').innerHTML = `<i class="fas fa-arrow-up mr-1"></i>+${absGrowth}%`;
    } else if (growth < 0) {
      element.innerHTML = `<span class="text-red-600 font-semibold">-${absGrowth}%</span> from last period`;
      element.querySelector('span').innerHTML = `<i class="fas fa-arrow-down mr-1"></i>-${absGrowth}%`;
    } else {
      element.innerHTML = `<span class="text-gray-600 font-semibold">0%</span> from last period`;
      element.querySelector('span').innerHTML = `<i class="fas fa-minus mr-1"></i>0%`;
    }
  };

  // Apply growth display
  updateGrowthDisplay('salesChange', summaryData.salesGrowth);
  updateGrowthDisplay('ordersChange', summaryData.ordersGrowth);
  updateGrowthDisplay('discountChange', summaryData.discountGrowth);
}

// Update pagination
function updatePagination(pagination) {
  if (!pagination) return;
  
  currentPage = pagination.current;
  totalPages = pagination.total;
  
  // Update info
  document.getElementById('paginationInfo').textContent = 
    `Showing ${pagination.start}-${pagination.end} of ${pagination.totalItems} orders`;
  
  // Update buttons
  document.getElementById('prevPageBtn').disabled = !pagination.hasPrev;
  document.getElementById('nextPageBtn').disabled = !pagination.hasNext;
  
  // Update page numbers
  const numbersContainer = document.getElementById('paginationNumbers');
  numbersContainer.innerHTML = '';
  
  // Smart pagination - show max 5 pages
  let startPage = Math.max(1, currentPage - 2);
  let endPage = Math.min(totalPages, currentPage + 2);
  
  if (startPage > 1) {
    const btn = document.createElement('button');
    btn.className = 'pagination-btn';
    btn.textContent = '1';
    btn.onclick = () => changePage(1);
    numbersContainer.appendChild(btn);
    
    if (startPage > 2) {
      const ellipsis = document.createElement('span');
      ellipsis.className = 'pagination-btn';
      ellipsis.textContent = '...';
      ellipsis.style.cursor = 'default';
      numbersContainer.appendChild(ellipsis);
    }
  }
  
  for (let i = startPage; i <= endPage; i++) {
    const btn = document.createElement('button');
    btn.className = `pagination-btn ${i === currentPage ? 'active' : ''}`;
    btn.textContent = i;
    btn.onclick = () => changePage(i);
    if (i === currentPage) btn.disabled = true;
    numbersContainer.appendChild(btn);
  }
  
  if (endPage < totalPages) {
    if (endPage < totalPages - 1) {
      const ellipsis = document.createElement('span');
      ellipsis.className = 'pagination-btn';
      ellipsis.textContent = '...';
      ellipsis.style.cursor = 'default';
      numbersContainer.appendChild(ellipsis);
    }
    
    const btn = document.createElement('button');
    btn.className = 'pagination-btn';
    btn.textContent = totalPages;
    btn.onclick = () => changePage(totalPages);
    numbersContainer.appendChild(btn);
  }
}

// Change page
function changePage(page) {
  if (page !== currentPage && page >= 1 && page <= totalPages) {
    currentPage = page;
    generateReport();
  }
}

// Enhanced Export functions with proper timezone handling
async function exportReport(format = "pdf") {
  const params = new URLSearchParams({
    filter: currentPeriod,
    format: format
  });

  // Add dates as properly formatted UTC strings for backend processing
  if (currentPeriod === 'custom') {
    params.append('startDate', toUTCString(currentFilters.startDate));
    params.append('endDate', toUTCString(currentFilters.endDate));
  }

  // Add specific date parameters for dropdown selections
  if (currentFilters.selectedValue) {
    const selectedValue = currentFilters.selectedValue;
    
    // Convert local dates to UTC strings for backend
    params.append('selectedDate', toUTCString(selectedValue.selectedDate));
    params.append('startDate', toUTCString(selectedValue.startDate));
    params.append('endDate', toUTCString(selectedValue.endDate));
    
    if (selectedValue.type === 'week') {
      params.append('weekNumber', selectedValue.weekNumber);
    }
    if (selectedValue.type === 'month') {
      params.append('month', selectedValue.month);
      params.append('year', selectedValue.year);
    }
    if (selectedValue.type === 'year') {
      params.append('year', selectedValue.year);
    }
  }

  try {
    showNotification(`Generating ${format.toUpperCase()} report...`, "info");

    // Build the URL
    const url = `/admin/api/sales-report/export?${params.toString()}`;

    // Use fetch API instead of window.open()
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Accept': format === 'pdf' ? 'application/pdf' : 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    // Get the blob from response
    const blob = await response.blob();
    
    // Create download link
    const downloadUrl = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = downloadUrl;
    
    // Extract filename from response headers or create one
    const contentDisposition = response.headers.get('Content-Disposition');
    let filename = `sales-report-${format}-${new Date().toISOString().split('T')[0]}.${format === 'pdf' ? 'pdf' : 'xlsx'}`;
    
    if (contentDisposition) {
      const filenameMatch = contentDisposition.match(/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/);
      if (filenameMatch && filenameMatch[1]) {
        filename = filenameMatch[1].replace(/['"]/g, '');
      }
    }
    
    link.download = filename;
    
    // Trigger download
    document.body.appendChild(link);
    link.click();
    
    // Cleanup
    document.body.removeChild(link);
    window.URL.revokeObjectURL(downloadUrl);

    showNotification(
      `${format.toUpperCase()} Sales Report downloaded successfully!`,
      "success"
    );

  } catch (error) {
    console.error("Export error:", error);
    showNotification(`Error generating ${format.toUpperCase()} report: ${error.message}`, "error");
  }
}

// Show loading overlay
function showLoadingOverlay(show) {
  const overlay = document.getElementById('loadingOverlay');
  overlay.style.display = show ? 'flex' : 'none';
}

// Show notification function
function showNotification(message, type = 'info') {
  const notification = document.createElement('div');
  notification.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg transform translate-x-full transition-transform duration-300 ${
    type === 'success' ? 'bg-green-500 text-white' : 
    type === 'error' ? 'bg-red-500 text-white' : 
    'bg-blue-500 text-white'
  }`;
  
  notification.style.transitionTimingFunction = 'cubic-bezier(0.4, 0, 0.2, 1)';

  notification.innerHTML = `
    <div class="flex items-center gap-2">
      <i class="fas ${type === 'success' ? 'fa-check-circle' : type === 'error' ? 'fa-exclamation-circle' : 'fa-info-circle'}"></i>
      <span>${message}</span>
    </div>
  `;
  
  document.body.appendChild(notification);

  setTimeout(() => {
    notification.classList.remove('translate-x-full');
  }, 10);

  setTimeout(() => {
    notification.classList.add('translate-x-full');
    setTimeout(() => {
      if (document.body.contains(notification)) {
        document.body.removeChild(notification);
      }
    }, 300);
  }, 3000);
}
</script>




<%- include('../partials/admin/footer') %>
