<%- include('../../views/partials/user/header') %>

<div class="bg-gray-50 min-h-screen px-4 py-12 flex flex-col items-center">

  <!-- Main failure card -->
  <div class="bg-white p-8 rounded-3xl shadow-2xl max-w-3xl w-full text-center">
    
    <!-- Top SVG and Image -->
    <div class="flex flex-col items-center mb-6">
      <img src="/images/order-failure.jpg" alt="Order Failure Illustration" class="w-48 mb-6" />
    </div>

    <!-- Message -->
    <h1 class="text-3xl font-extrabold mb-2 text-red-600">Payment Failed!</h1>
    <p class="text-gray-600 max-w-xl mx-auto mb-6">
      Unfortunately, your payment could not be processed for 
      <span class="font-semibold text-gray-900">Order #<%= order.orderId %></span>.
      Don't worry, your order is saved and you can retry the payment anytime.
    </p>

    <!-- Order Summary Box -->
    <div class="bg-gray-50 rounded-2xl p-6 mb-8 max-w-lg mx-auto">
      <div class="grid grid-cols-2 gap-4 text-center">
        <div>
          <div class="text-2xl font-bold text-gray-800">₹<%= order.finalAmount.toLocaleString() %></div>
          <div class="text-sm text-gray-600">Amount Due</div>
        </div>
        <div>
          <div class="text-2xl font-bold text-red-600"><%= order.orderitems.length %></div>
          <div class="text-sm text-gray-600">Items</div>
        </div>
      </div>
      <div class="mt-4 pt-4 border-t border-gray-200">
        <div class="text-lg font-semibold text-gray-800">Payment Status: 
          <span class="text-red-600">FAILED</span>
        </div>
      </div>
    </div>

    <!-- Buttons -->
    <div class="flex flex-col sm:flex-row justify-center gap-6 mb-12">
      <button id="retryBtn" 
              class="bg-red-600 hover:bg-red-700 transition text-white px-8 py-3 rounded-lg font-semibold">
        Retry Payment
      </button>
      <a href="/order" 
         class="bg-gray-200 hover:bg-gray-300 transition text-gray-800 px-8 py-3 rounded-lg font-semibold">
        View My Orders
      </a>
    </div>

    <!-- Additional Help -->
    <div class="text-sm text-gray-500 max-w-md mx-auto">
      <p class="mb-2">
        <strong>Need Help?</strong> If you continue to face issues, please contact our support team.
      </p>
      <p>Your order will be automatically cancelled if payment is not completed within 24 hours.</p>
    </div>
  </div>

</div>

<!-- Simple Retry Payment Modal -->
<div id="retryModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50 px-4">
  <div class="bg-white p-8 rounded-3xl shadow-2xl w-full max-w-md text-center relative">
    
    <!-- Close Button -->
    <button id="closeModal" class="absolute top-4 right-4 text-gray-500 hover:text-gray-800 text-2xl leading-none">
      &times;
    </button>
    
    <!-- Modal Content -->
    <div class="mb-6">
      <div class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
        <svg class="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
        </svg>
      </div>
      <h2 class="text-2xl font-bold text-gray-900 mb-2">Complete Payment</h2>
      <p class="text-gray-600 mb-4">Order #<%= order.orderId %></p>
      <div class="text-3xl font-bold text-red-600 mb-2">₹<%= order.finalAmount.toLocaleString() %></div>
      <div class="text-sm text-gray-500">Total Amount</div>
    </div>
    
    <!-- Payment Button -->
    <button id="payNow" 
            class="bg-red-600 hover:bg-red-700 text-white px-8 py-4 rounded-lg font-semibold w-full mb-4 transition">
      Pay with Razorpay
    </button>
    
    <!-- Cancel Button -->
    <button id="cancelBtn" 
            class="bg-gray-200 hover:bg-gray-300 text-gray-800 px-6 py-2 rounded-lg font-semibold w-full transition">
      Cancel
    </button>
  </div>
</div>

<!-- Toaster Container -->
<div id="toasterContainer" class="fixed top-4 right-4 z-[9999] space-y-3"></div>

<style>
/* Toaster Styles */
.toaster {
  min-width: 300px;
  max-width: 400px;
  padding: 16px 20px;
  border-radius: 12px;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1), 0 4px 10px rgba(0, 0, 0, 0.05);
  display: flex;
  align-items: center;
  gap: 12px;
  font-weight: 500;
  transform: translateX(400px);
  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.toaster.show {
  transform: translateX(0);
}

.toaster.success {
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  color: white;
}

.toaster.error {
  background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
  color: white;
}

.toaster.warning {
  background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
  color: white;
}

.toaster.info {
  background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
  color: white;
}

.toaster-icon {
  flex-shrink: 0;
  width: 24px;
  height: 24px;
}

.toaster-content {
  flex: 1;
}

.toaster-title {
  font-weight: 600;
  margin-bottom: 2px;
  font-size: 14px;
}

.toaster-message {
  font-size: 13px;
  opacity: 0.9;
}

.toaster-close {
  flex-shrink: 0;
  background: none;
  border: none;
  color: currentColor;
  cursor: pointer;
  padding: 4px;
  border-radius: 4px;
  opacity: 0.7;
  transition: opacity 0.2s;
}

.toaster-close:hover {
  opacity: 1;
}

/* Responsive adjustments */
@media (max-width: 640px) {
  #toasterContainer {
    top: 16px;
    right: 16px;
    left: 16px;
  }
  
  .toaster {
    min-width: auto;
    max-width: 100%;
    transform: translateY(-100px);
  }
  
  .toaster.show {
    transform: translateY(0);
  }
}
</style>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
  const retryBtn = document.getElementById('retryBtn');
  const retryModal = document.getElementById('retryModal');
  const closeModal = document.getElementById('closeModal');
  const cancelBtn = document.getElementById('cancelBtn');
  const payNow = document.getElementById('payNow');

  // Toaster Notification System
  function showToaster(type, title, message, duration = 5000) {
    const container = document.getElementById('toasterContainer');
    
    // Create toaster element
    const toaster = document.createElement('div');
    toaster.className = `toaster ${type}`;
    
    // Icon mapping
    const icons = {
      success: `<svg class="toaster-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>`,
      error: `<svg class="toaster-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>`,
      warning: `<svg class="toaster-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                </svg>`,
      info: `<svg class="toaster-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
             </svg>`
    };
    
    toaster.innerHTML = `
      ${icons[type]}
      <div class="toaster-content">
        <div class="toaster-title">${title}</div>
        <div class="toaster-message">${message}</div>
      </div>
      <button class="toaster-close" onclick="removeToaster(this.parentElement)">
        <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    `;
    
    // Add to container
    container.appendChild(toaster);
    
    // Trigger animation
    setTimeout(() => {
      toaster.classList.add('show');
    }, 100);
    
    // Auto remove
    setTimeout(() => {
      removeToaster(toaster);
    }, duration);
    
    return toaster;
  }

  function removeToaster(toaster) {
    if (toaster && toaster.parentElement) {
      toaster.classList.remove('show');
      setTimeout(() => {
        if (toaster.parentElement) {
          toaster.parentElement.removeChild(toaster);
        }
      }, 400);
    }
  }

  // Show modal
  retryBtn.onclick = () => {
    retryModal.classList.remove('hidden');
    retryModal.classList.add('flex');
  };

  // Hide modal functions
  const hideModal = () => {
    retryModal.classList.add('hidden');
    retryModal.classList.remove('flex');
  };

  closeModal.onclick = hideModal;
  cancelBtn.onclick = hideModal;

  // Close on outside click
  retryModal.onclick = (e) => {
    if (e.target === retryModal) {
      hideModal();
    }
  };

  // Razorpay Payment
  payNow.onclick = () => {
    const options = {
      key: "<%= razorpayKey %>",
      amount: "<%= finalAmount * 100%>",
      currency: "INR",
      order_id: "<%= razorpayOrderId || '' %>",
      name: "WoodLand",
      description: "Order Payment - #<%= order.orderId %>",
      image: "/images/logo.png",
      theme: {
        color: "#dc2626"
      },
      handler: function (response) {
        // Show loading state
        payNow.innerHTML = 'Verifying Payment...';
        payNow.disabled = true;
        
        // Show processing toaster
        showToaster('info', 'Processing Payment', 'Verifying your payment details...', 3000);
        
        fetch('/retry-payment', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            razorpay_payment_id: response.razorpay_payment_id,
            razorpay_order_id: response.razorpay_order_id,
            razorpay_signature: response.razorpay_signature,
            orderId: "<%= order._id %>",
            paymentMethod: response.method,
            finalAmount: "<%= order.finalAmount %>"
          })
        })
        .then(res => res.json())
        .then(data => {
          if (data.success) {
            // Show success toaster
            showToaster('success', 'Payment Successful!', 'Redirecting to order confirmation...', 3000);
            
            // Redirect to success page after delay
            setTimeout(() => {
              window.location.href = `/order-success?orderId=${data.orderId}`;
            }, 2000);
          } else if (data.message) {
            // Show custom error message from backend
            showToaster('error', 'Payment Failed', data.message, 6000);
            payNow.innerHTML = 'Pay with Razorpay';
            payNow.disabled = false;
          } else {
            // Generic failure message
            showToaster('error', 'Verification Failed', 'Payment verification failed. Please try again.', 5000);
            payNow.innerHTML = 'Pay with Razorpay';
            payNow.disabled = false;
          }
        })
        .catch(error => {
          console.error('Payment error:', error);
          showToaster('error', 'Payment Error', 'Something went wrong. Please try again.', 5000);
          payNow.innerHTML = 'Pay with Razorpay';
          payNow.disabled = false;
        });
      },
      prefill: {
        name: "<%= order.shippingAddress.title %>",
        email: "<%= order.shippingAddress.email %>",
        contact: "<%= order.shippingAddress.phone %>"
      },
      modal: {
        ondismiss: function() {
          console.log('Payment cancelled by user');
          showToaster('warning', 'Payment Cancelled', 'You cancelled the payment process.', 4000);
          payNow.innerHTML = 'Pay with Razorpay';
          payNow.disabled = false;
        }
      }
    };

    try {
      const rzp = new Razorpay(options);
      
      rzp.on('payment.failed', function (response) {
        console.error('Payment failed:', response.error);
        const errorMsg = response.error.description || response.error.reason || 'Please try again';
        showToaster('error', 'Payment Failed', errorMsg, 6000);
        payNow.innerHTML = 'Pay with Razorpay';
        payNow.disabled = false;
      });
      
      rzp.open();
      
      // Show info toaster when payment gateway opens
      showToaster('info', 'Payment Gateway Opened', 'Complete your payment in the popup window.', 3000);
      
    } catch (error) {
      console.error('Razorpay initialization error:', error);
      showToaster('error', 'Gateway Error', 'Unable to initialize payment. Please refresh and try again.', 6000);
      payNow.innerHTML = 'Pay with Razorpay';
      payNow.disabled = false;
    }
  };

  // Close modal with Escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      hideModal();
    }
  });

  // Show welcome toaster when page loads
  document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
      showToaster('warning', 'Payment Required', 'Complete your payment to confirm the order.', 4000);
    }, 1000);
  });
</script>

<%- include('../../views/partials/user/footer') %>
