<link rel="stylesheet" href="/css/home.css">
<%- include('../../views/partials/user/header') %>

<div class="container mx-auto px-4 py-8">
    <div class="flex flex-col lg:flex-row gap-8">
        
        <!-- Mobile Filter Overlay -->
        <div id="filterOverlay"
             class="fixed inset-0 bg-black bg-opacity-50 z-40 opacity-0 invisible transition-all duration-300 ease-in-out lg:hidden"
             onclick="closeFilterSidebar()"></div>
        
        <!-- Sidebar: Filters -->
        <aside id="filterSidebar"
               class="fixed top-0 -left-80 w-80 h-full bg-white z-50 transition-all duration-300 ease-in-out overflow-y-auto lg:static lg:left-auto lg:w-1/4 lg:h-auto lg:bg-transparent lg:z-auto lg:transition-none lg:overflow-y-visible">
            <div class="p-6 lg:p-0">
                <!-- Mobile Filter Header -->
                <div class="flex justify-between items-center mb-6 lg:hidden">
                    <h3 class="text-lg font-semibold">Filters</h3>
                    <button onclick="closeFilterSidebar()" class="text-gray-500 hover:text-gray-700 p-1">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                
                <!-- Filter Form -->
                <form id="filterForm" class="space-y-6">
                    <!-- Product Type -->
                    <div>
                        <h5 class="text-lg font-semibold mb-2">Product Type</h5>
                        <div class="space-y-2">
                            <% for (let i = 0; i < category.length; i++) { %>
                                <label class="flex items-center gap-2 text-sm text-gray-700 cursor-pointer hover:text-gray-900">
                                    <input type="radio" name="category" value="<%= category[i].name %>" class="h-4 w-4 text-blue-600 rounded border-gray-300 focus:ring-blue-500">
                                    <%= category[i].name %>
                                </label>
                            <% } %>
                        </div>
                    </div>
                    
                    <!-- Price -->
                    <div>
                        <h5 class="text-lg font-semibold mb-2">Price</h5>
                        <div class="space-y-2">
                            <label class="flex items-center gap-2 text-sm text-gray-700 cursor-pointer hover:text-gray-900">
                                <input type="radio" name="priceRange" value="0-30000" class="h-4 w-4 text-blue-600 rounded border-gray-300 focus:ring-blue-500">
                                Under ₹30,000
                            </label>
                            <label class="flex items-center gap-2 text-sm text-gray-700 cursor-pointer hover:text-gray-900">
                                <input type="radio" name="priceRange" value="0-50000" class="h-4 w-4 text-blue-600 rounded border-gray-300 focus:ring-blue-500">
                                Under ₹50,000
                            </label>
                            <label class="flex items-center gap-2 text-sm text-gray-700 cursor-pointer hover:text-gray-900">
                                <input type="radio" name="priceRange" value="0-70000" class="h-4 w-4 text-blue-600 rounded border-gray-300 focus:ring-blue-500">
                                Under ₹70,000
                            </label>
                            <label class="flex items-center gap-2 text-sm text-gray-700 cursor-pointer hover:text-gray-900">
                                <input type="radio" name="priceRange" value="above-70000" class="h-4 w-4 text-blue-600 rounded border-gray-300 focus:ring-blue-500">
                                Above ₹70,000
                            </label>
                        </div>
                    </div>
                    
                    <!-- Discount -->
                    <div>
                        <h5 class="text-lg font-semibold mb-2">Discount</h5>
                        <div class="space-y-2">
                            <label class="flex items-center gap-2 text-sm text-gray-700 cursor-pointer hover:text-gray-900">
                                <input type="radio" name="discount" value="10" class="h-4 w-4 text-blue-600 rounded border-gray-300 focus:ring-blue-500">
                                10% or more
                            </label>
                            <label class="flex items-center gap-2 text-sm text-gray-700 cursor-pointer hover:text-gray-900">
                                <input type="radio" name="discount" value="20" class="h-4 w-4 text-blue-600 rounded border-gray-300 focus:ring-blue-500">
                                20% or more
                            </label>
                            <label class="flex items-center gap-2 text-sm text-gray-700 cursor-pointer hover:text-gray-900">
                                <input type="radio" name="discount" value="30" class="h-4 w-4 text-blue-600 rounded border-gray-300 focus:ring-blue-500">
                                30% or more
                            </label>
                            <label class="flex items-center gap-2 text-sm text-gray-700 cursor-pointer hover:text-gray-900">
                                <input type="radio" name="discount" value="50" class="h-4 w-4 text-blue-600 rounded border-gray-300 focus:ring-blue-500">
                                Above 50%
                            </label>
                        </div>
                    </div>
                    
                    <!-- Variants -->
                    <div>
                        <h5 class="text-lg font-semibold mb-2">Variants</h5>
                        <div class="space-y-2">
                            <!-- Color -->
                            <div>
                                <p class="text-sm font-medium text-gray-700 mb-1">Color</p>
                                <div class="space-y-2">
                                    <% for(let i=0; i<variants.length; i++) { %>
                                        <label class="flex items-center gap-2 text-sm text-gray-700 cursor-pointer hover:text-gray-900">
                                            <input type="checkbox" name="color" value="<%= variants[i].color %>" class="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500">
                                            <%= variants[i].color %>
                                        </label>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Clear filter -->
                    <div class="flex justify-between space-x-2 mb-4">
                        <button type="button" id="clearFiltersBtn"
                             class="bg-gray-300 hover:bg-gray-400 text-gray-700 font-semibold py-2 px-4 rounded w-full transition-colors duration-200">
                            Clear Filters
                        </button>
                    </div>
                </form>
            </div>
        </aside>

        <!-- Main Content: Products -->
        <section class="lg:w-3/4 w-full">
            
            <!-- Mobile Filter Button -->
            <div class="lg:hidden mb-4">
                <button onclick="openFilterSidebar()" class="w-full flex items-center justify-center gap-2 bg-white border border-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-50 transition-colors duration-200 shadow-sm">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
                    </svg>
                    Filters
                </button>
            </div>

            <!-- Search Bar -->
            <div class="mb-6 w-full">
            <form id="searchForm" class="relative w-full max-w-xl mx-auto">
                <!-- Search Input -->
                <input type="text" id="searchInput" name="search" placeholder="Search categories..."
                class="w-full px-4 py-2 pr-10 rounded-md border border-slate-300 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent text-gray-800 transition-all duration-200"/>

                <!-- Clear Button (✕) -->
                <button type="button" id="clearBtn"
                class="absolute right-14 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-red-500 focus:outline-none hidden">
                ✕
                </button>

                <!-- Search Button -->
                <button type="submit" id="searchBtn"
                class="absolute right-2 top-1/2 transform -translate-y-1/2 bg-gray-500 text-white p-2 rounded-md hover:bg-gray-700 transition-colors duration-200">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
                </button>
            </form>
            </div>

            <!-- Breadcrumb -->
            <nav class="text-sm text-gray-600 mb-4" aria-label="Breadcrumb">
                <ol class="list-none p-0 inline-flex items-center space-x-1 sm:space-x-2">
                    <li>
                    <a href="/" class="text-gray-500 hover:text-gray-800">Home</a>
                    <span class="mx-2 text-gray-900 font-semibold text-sm">></span>
                    </li>
                    <li>
                    <a href="/shop" class="text-gray-800 font-medium truncate max-w-[200px] sm:max-w-xs">Shop</a>
                    </li>
                </ol>
            </nav>

            <!-- Sorting -->
            <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-6">
                <h4 class="text-xl font-bold text-gray-800">Products</h4>
                <form id="sortForm" method="POST">
                    <select name="sort" id="sortSelect"
                        class="border border-gray-300 text-gray-700 py-2 px-3 rounded focus:ring-2 focus:ring-indigo-400 focus:border-transparent transition-all duration-200 bg-white min-w-[180px]">
                        <option value="">Sort By</option>
                        <option value="priceAsc">Price: Low to High</option>
                        <option value="priceDesc">Price: High to Low</option>
                        <option value="az">A to Z</option>
                        <option value="za">Z to A</option>
                    </select>
                </form>
            </div>

            <!-- Product Grid -->
            <div id="productsGrid" class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-4 sm:gap-6">
                <% for(let i = 0; i < products.length; i++) { %>
                <div class="w-full bg-white rounded-xl shadow-md hover:shadow-lg transition-all duration-300 transform hover:scale-105 overflow-hidden">
                    <div class="relative group overflow-hidden">
                        <!-- Offer Badge -->
                        <% if(products[i].variants[0].offerPercentage > 0) { %>
                        <div class="absolute top-2 left-2 z-10">
                            <span class="bg-red-500 text-white text-xs font-bold px-2 py-1 rounded-full shadow-lg">
                                <%= products[i].variants[0].offerPercentage %>% OFF
                            </span>
                        </div>
                        <% } %>
                        <a href="/shopDetails?id=<%= products[i]._id %>" class="block">
                            <img src="/uploads/product-images/<%= products[i].images[0] %>" alt="<%= products[i].productName %>"
                                class="w-full h-36 sm:h-40 object-cover group-hover:scale-110 transition-transform duration-300">
                        </a>
                    </div>
                    <div class="p-3 sm:p-4 flex flex-col h-[150px] sm:h-[160px]">
                        <h3 class="text-sm sm:text-base font-semibold text-gray-800 line-clamp-2 mb-2 leading-tight h-[40px] sm:h-[48px] overflow-hidden">
                            <%= products[i].productName %>
                        </h3>
                        <div class="mt-auto">
                            <% if(products[i].variants[0].offerPercentage > 0) { %>
                                <!-- With Offer -->
                                <div class="flex items-center gap-2 mb-1">
                                    <p class="text-lg font-bold text-red-600">
                                        ₹<%= products[i].variants[0].finalPrice.toLocaleString('en-IN') %>
                                    </p>
                                    <p class="text-sm text-gray-500 line-through">
                                        ₹<%= products[i].variants[0].regularPrice.toLocaleString('en-IN') %>
                                    </p>
                                </div>
                                <p class="text-xs text-green-600 font-semibold">
                                    You save ₹<%= (products[i].variants[0].regularPrice - products[i].variants[0].finalPrice).toLocaleString('en-IN') %>
                                </p>
                            <% } else { %>
                                <!-- Without Offer -->
                                <p class="text-lg font-bold text-gray-900">
                                    ₹<%= products[i].variants[0].salePrice.toLocaleString('en-IN') %>
                                </p>
                            <% } %>
                        </div>
                        <div class="flex items-center gap-2 mt-2">
                            <!-- Add to Cart -->
                            <button
                                data-product-id="<%= products[i]._id %>"
                                data-variant-id="<%= products[i].variants[0]._id %>"
                                class="add-to-cart-btn flex-1 bg-gray-800 text-white text-xs px-3 py-2 rounded hover:bg-gray-600 transition-colors duration-200 text-center font-medium">
                                Add to Cart
                            </button>
                            <!-- Wishlist Icon -->
                            <button
                                type="button"
                                data-product-id="<%= products[i]._id %>"
                                data-variant-id="<%= products[i].variants[0]._id %>"
                                class="wishlist-btn text-red-500 hover:text-red-600 transition-colors duration-200 p-2 rounded-full hover:bg-red-50"
                                data-in-wishlist="<%= wishlistProductIds.includes(products[i]._id.toString()) %>">
                                <% if (wishlistProductIds.includes(products[i]._id.toString())) { %>
                                <!-- Filled Heart -->
                                <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24"
                                    class="w-4 h-4">
                                    <path stroke-linecap="round" stroke-linejoin="round"
                                        d="M21 8.25c0-2.485-2.014-4.5-4.5-4.5a4.478 4.478 0 00-3.643 1.908A4.478 4.478 0 009.214 3.75C6.73 3.75 4.714 5.765 4.714 8.25c0 5.25 7.286 9.75 7.286 9.75s7.286-4.5 7.286-9.75z"/>
                                </svg>
                                <% } else { %>
                                <!-- Outline Heart -->
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                    stroke="currentColor" class="w-4 h-4">
                                    <path stroke-linecap="round" stroke-linejoin="round"
                                        d="M21 8.25c0-2.485-2.014-4.5-4.5-4.5a4.478 4.478 0 00-3.643 1.908A4.478 4.478 0 009.214 3.75C6.73 3.75 4.714 5.765 4.714 8.25c0 5.25 7.286 9.75 7.286 9.75s7.286-4.5 7.286-9.75z"/>
                                </svg>
                                <% } %>
                            </button>
                        </div>
                    </div>
                </div>
                <% } %>
            </div>

            <!-- Pagination -->
            <div id="paginationContainer" class="flex justify-center mt-8">
                <% if (totalPages > 1) { %>
                    <ul class="flex gap-2 flex-wrap justify-center">
                        <% for (let i = 1; i <= totalPages; i++) { %>
                            <li>
                                <a href="?page=<%= i %>&search=<%= searchQuery %>"
                                    class="px-3 py-2 sm:px-4 sm:py-2 rounded-md text-sm font-semibold border transition-all duration-200 min-w-[40px] text-center
                                    <%= i === currentPage
                                         ? 'bg-gray-600 text-white border-gray-600 shadow-md'
                                         : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50 hover:border-gray-400' %>">
                                    <%= i %>
                                </a>
                            </li>
                        <% } %>
                    </ul>
                <% } %>
            </div>
        </section>
    </div>
</div>

<!-- Pass server data to client-side JavaScript -->
<script>
    window.wishlistProductIds = <%- JSON.stringify(wishlistProductIds) %>;
</script>

<script>
// Search clear
const searchInput = document.getElementById('searchInput');
const clearBtn = document.getElementById('clearBtn');
const searchForm = document.getElementById('searchForm');

// Toggle clear button visibility
searchInput.addEventListener('input', () => {
    clearBtn.classList.toggle('hidden', searchInput.value.trim() === '');
});

// Clear the input & resubmit
clearBtn.addEventListener('click', () => {
    searchInput.value = '';
    clearBtn.classList.add('hidden');
    searchInput.focus();
    // Don't submit here, just clear the input
});

// Mobile filter sidebar functions
function openFilterSidebar() {
    const sidebar = document.getElementById('filterSidebar');
    const overlay = document.getElementById('filterOverlay');
    
    sidebar.classList.remove('-left-80');
    sidebar.classList.add('left-0');
    overlay.classList.remove('opacity-0', 'invisible');
    overlay.classList.add('opacity-100', 'visible');
    document.body.classList.add('overflow-hidden');
}

function closeFilterSidebar() {
    const sidebar = document.getElementById('filterSidebar');
    const overlay = document.getElementById('filterOverlay');
    
    sidebar.classList.remove('left-0');
    sidebar.classList.add('-left-80');
    overlay.classList.remove('opacity-100', 'visible');
    overlay.classList.add('opacity-0', 'invisible');
    document.body.classList.remove('overflow-hidden');
}

// Close sidebar when clicking outside on mobile
document.addEventListener('click', function(event) {
    const sidebar = document.getElementById('filterSidebar');
    const filterButton = event.target.closest('button[onclick="openFilterSidebar()"]');
    
    if (!sidebar.contains(event.target) && !filterButton && window.innerWidth < 1024) {
        closeFilterSidebar();
    }
});

// Close sidebar on window resize to desktop
window.addEventListener('resize', function() {
    if (window.innerWidth >= 1024) {
        closeFilterSidebar();
    }
});

// Escape key to close filter on mobile
document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape' && window.innerWidth < 1024) {
        closeFilterSidebar();
    }
});

document.addEventListener("DOMContentLoaded", function () {
    const filterForm = document.getElementById("filterForm");
    const productContainer = document.getElementById("productsGrid");
    const clearFiltersBtn = document.getElementById("clearFiltersBtn");

    // Initialize filters from URL on page load
    initFiltersFromURL();

    // Add to Cart functionality using event delegation
    productContainer.addEventListener('click', async function(event) {
        if (event.target.classList.contains('add-to-cart-btn')) {
            const button = event.target;
            const productId = button.getAttribute('data-product-id');
            const variantId = button.getAttribute('data-variant-id');
            
            button.disabled = true;
            button.textContent = 'Adding...';
            
            try {
                const response = await fetch(`/cart/${productId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ productId, variantId })
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    showNotification('Product added to cart!', 'success');
                } else {
                    showNotification(result.message || 'Failed to add to cart', 'error');
                }
            } catch (err) {
                console.error('Fetch error:', err);
                showNotification('Something went wrong. Please try again.', 'error');
            } finally {
                button.disabled = false;
                button.textContent = 'Add to Cart';
            }
        }
    });

    // Wishlist functionality using event delegation
    productContainer.addEventListener('click', async function(event) {
        if (event.target.closest('.wishlist-btn')) {
            const button = event.target.closest('.wishlist-btn');
            const productId = button.getAttribute('data-product-id');
            const variantId = button.getAttribute('data-variant-id');
            const isInWishlist = button.getAttribute('data-in-wishlist') === 'true';
            
            try {
                const response = await fetch(`/wishlist`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ productId, variantId })
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    const newState = !isInWishlist;
                    button.setAttribute('data-in-wishlist', newState);
                    
                    const svg = button.querySelector('svg');
                    if (newState) {
                        svg.setAttribute('fill', 'currentColor');
                        svg.removeAttribute('stroke');
                        showNotification('Added to wishlist!', 'success');
                    } else {
                        svg.setAttribute('fill', 'none');
                        svg.setAttribute('stroke', 'currentColor');
                        showNotification('Removed from wishlist!', 'info');
                    }
                    
                    if (newState) {
                        window.wishlistProductIds.push(productId);
                    } else {
                        window.wishlistProductIds = window.wishlistProductIds.filter(id => id !== productId);
                    }
                } else {
                    showNotification(result.message || 'Failed to update wishlist', 'error');
                }
            } catch (err) {
                console.error('Wishlist error:', err);
                showNotification('Something went wrong. Please try again.', 'error');
            }
        }
    });

    // Notification function
    function showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `fixed top-4 right-4 z-50 px-6 py-3 rounded-md shadow-lg transition-all duration-300 transform translate-x-full ${
            type === 'success' ? 'bg-green-500 text-white' : 
            type === 'error' ? 'bg-red-500 text-white' : 
            'bg-blue-500 text-white'
        }`;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.classList.remove('translate-x-full');
        }, 100);
        
        setTimeout(() => {
            notification.classList.add('translate-x-full');
            setTimeout(() => {
                if (document.body.contains(notification)) {
                    document.body.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }

    // Initialize filters from URL parameters
    function initFiltersFromURL() {
        const urlParams = new URLSearchParams(window.location.search);
        
        // Restore category filter
        const category = urlParams.get('category');
        if (category) {
            const categoryInput = document.querySelector(`input[name="category"][value="${category}"]`);
            if (categoryInput) categoryInput.checked = true;
        }
        
        // Restore price filter
        const price = urlParams.get('price');
        if (price) {
            const priceInput = document.querySelector(`input[name="priceRange"][value="${price}"]`);
            if (priceInput) priceInput.checked = true;
        }
        
        // Restore discount filter
        const discount = urlParams.get('discount');
        if (discount) {
            const discountInput = document.querySelector(`input[name="discount"][value="${discount}"]`);
            if (discountInput) discountInput.checked = true;
        }
        
        // Restore color filters
        const colors = urlParams.get('color');
        if (colors) {
            colors.split(',').forEach(color => {
                const colorInput = document.querySelector(`input[name="color"][value="${color}"]`);
                if (colorInput) colorInput.checked = true;
            });
        }
        
        // Restore sort
        const sortBy = urlParams.get('sortBy');
        if (sortBy) {
            document.getElementById('sortSelect').value = sortBy;
        }
        
        // Restore search
        const search = urlParams.get('search');
        if (search) {
            document.getElementById('searchInput').value = search;
            clearBtn.classList.remove('hidden');
        }
        
        // If we have any filters, fetch filtered products
        if (urlParams.toString()) {
            const page = parseInt(urlParams.get('page')) || 1;
            fetchFilteredProducts(page);
        }
    }

    // Fetch filtered products and update URL
    async function fetchFilteredProducts(page = 1) {
        const selectedCategory = document.querySelector('input[name="category"]:checked');
        const categoryValue = selectedCategory ? selectedCategory.value : null;

        const selectedPrice = document.querySelector('input[name="priceRange"]:checked');
        const priceValue = selectedPrice ? selectedPrice.value : null;

        const selectedDiscount = document.querySelector('input[name="discount"]:checked');
        const discountValue = selectedDiscount ? selectedDiscount.value : null;

        const selectedColors = Array.from(document.querySelectorAll('input[name="color"]:checked')).map(cb => cb.value);
        const sortValue = document.getElementById('sortSelect').value;
        const searchValue = document.getElementById('searchInput').value.trim();

        // Build URL parameters
        const params = new URLSearchParams();
        params.set('page', page.toString());
        
        if (categoryValue) params.set('category', categoryValue);
        if (priceValue) params.set('price', priceValue);
        if (discountValue) params.set('discount', discountValue);
        if (selectedColors.length > 0) params.set('color', selectedColors.join(','));
        if (sortValue) params.set('sortBy', sortValue);
        if (searchValue) params.set('search', searchValue);

        // Update URL without reloading page
        const newUrl = `${window.location.pathname}?${params.toString()}`;
        window.history.pushState({ path: newUrl }, '', newUrl);

        try {
            // Use the same route but with GET method and query parameters
            const response = await fetch(`/filter?${params.toString()}`, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }
            });
            
            const data = await response.json();
            
            if (data.success) {
                renderProducts(data);
                renderPagination(data.totalPages, data.currentPage, searchValue);
            } else {
                showError(data.message || 'No products found');
            }
        } catch (error) {
            console.error('Fetch error:', error);
            showError('Unable to fetch products. Please try again.');
        }
        
        // Close mobile filter after applying
        if (window.innerWidth < 1024) {
            closeFilterSidebar();
        }
    }

    // Render products
    function renderProducts(data) {
        const products = data.products;
        productContainer.innerHTML = "";

        if (products.length === 0) {
            productContainer.innerHTML = `
                <div class="col-span-full flex flex-col items-center justify-center py-12">
                    <svg class="w-16 h-16 text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"></path>
                    </svg>
                    <p class="text-center text-gray-500 text-lg font-medium">No products found</p>
                    <p class="text-center text-gray-400 text-sm mt-1">Try adjusting your filters or search terms</p>
                </div>`;
            return;
        }

        products.forEach((product) => {
            const isInWishlist = window.wishlistProductIds.includes(product._id);
            const variant = product.variants[0];
            const hasOffer = variant.offerPercentage > 0;

            let priceHTML = "";
            let badgeHTML = "";

            if (hasOffer) {
                badgeHTML = `
                    <div class="absolute top-2 left-2 z-10">
                        <span class="bg-red-500 text-white text-xs font-bold px-2 py-1 rounded-full shadow-lg">
                            ${variant.offerPercentage}% OFF
                        </span>
                    </div>
                `;
                
                const basePrice = variant.salePrice || variant.regularPrice;
                const savings = basePrice - variant.finalPrice;
                priceHTML = `
                    <div class="flex items-center gap-2 mb-1">
                        <p class="text-lg font-bold text-red-600">
                            ₹${variant.finalPrice.toLocaleString("en-IN")}
                        </p>
                        <p class="text-sm text-gray-500 line-through">
                            ₹${basePrice.toLocaleString("en-IN")}
                        </p>
                    </div>
                    <p class="text-xs text-green-600 font-semibold">
                        You save ₹${savings.toLocaleString("en-IN")}
                    </p>
                `;
            } else {
                const displayPrice = variant.salePrice || variant.regularPrice;
                priceHTML = `
                    <p class="text-lg font-bold text-gray-900">
                        ₹${displayPrice.toLocaleString("en-IN")}
                    </p>
                `;
            }

            const productHTML = `
                <div class="w-full bg-white rounded-xl shadow-md hover:shadow-lg transition-all duration-300 transform hover:scale-105 overflow-hidden">
                    <div class="relative group overflow-hidden">
                        ${badgeHTML}
                        <a href="/shopDetails?id=${product._id}" class="block">
                            <img src="/uploads/product-images/${product.images[0]}" alt="${product.productName}"
                                class="w-full h-36 sm:h-40 object-cover group-hover:scale-110 transition-transform duration-300">
                        </a>
                    </div>
                    <div class="p-3 sm:p-4 flex flex-col h-[150px] sm:h-[160px]">
                        <h3 class="text-sm sm:text-base font-semibold text-gray-800 line-clamp-2 mb-2 leading-tight h-[40px] sm:h-[48px] overflow-hidden">
                            ${product.productName}
                        </h3>
                        <div class="mt-auto">
                            ${priceHTML}
                        </div>
                        <div class="flex items-center gap-2 mt-2">
                            <button
                                data-product-id="${product._id}"
                                data-variant-id="${product.variants[0]._id}"
                                class="add-to-cart-btn flex-1 bg-gray-800 text-white text-xs px-3 py-2 rounded hover:bg-gray-600 transition-colors duration-200 text-center font-medium">
                                Add to Cart
                            </button>
                            <button
                                type="button"
                                data-product-id="${product._id}"
                                data-variant-id="${product.variants[0]._id}"
                                class="wishlist-btn text-red-500 hover:text-red-600 transition-colors duration-200 p-2 rounded-full hover:bg-red-50"
                                data-in-wishlist="${isInWishlist}">
                                ${isInWishlist ? `
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" class="w-4 h-4">
                                        <path stroke-linecap="round" stroke-linejoin="round"
                                            d="M21 8.25c0-2.485-2.014-4.5-4.5-4.5a4.478 4.478 0 00-3.643 1.908A4.478 4.478 0 009.214 3.75C6.73 3.75 4.714 5.765 4.714 8.25c0 5.25 7.286 9.75 7.286 9.75s7.286-4.5 7.286-9.75z"/>
                                    </svg>` : `
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" stroke="currentColor" viewBox="0 0 24 24" class="w-4 h-4">
                                        <path stroke-linecap="round" stroke-linejoin="round"
                                            d="M21 8.25c0-2.485-2.014-4.5-4.5-4.5a4.478 4.478 0 00-3.643 1.908A4.478 4.478 0 009.214 3.75C6.73 3.75 4.714 5.765 4.714 8.25c0 5.25 7.286 9.75 7.286 9.75s7.286-4.5 7.286-9.75z"/>
                                    </svg>`}
                            </button>
                        </div>
                    </div>
                </div>`;

            productContainer.insertAdjacentHTML("beforeend", productHTML);
        });
    }

    // Render pagination
    function renderPagination(totalPages, currentPage, searchQuery = "") {
        const paginationContainer = document.getElementById("paginationContainer");
        paginationContainer.innerHTML = "";

        if (totalPages <= 1) return;

        const ul = document.createElement("ul");
        ul.className = "flex gap-2 flex-wrap justify-center";

        for (let i = 1; i <= totalPages; i++) {
            const li = document.createElement("li");
            const a = document.createElement("a");
            a.textContent = i;
            a.href = "#";
            a.className = `px-3 py-2 sm:px-4 sm:py-2 rounded-md text-sm font-semibold border transition-all duration-200 min-w-[40px] text-center ${
                i === currentPage
                    ? "bg-gray-600 text-white border-gray-600 shadow-md"
                    : "bg-white text-gray-700 border-gray-300 hover:bg-gray-50 hover:border-gray-400"
            }`;

            a.addEventListener("click", function (e) {
                e.preventDefault();
                fetchFilteredProducts(i);
            });

            li.appendChild(a);
            ul.appendChild(li);
        }

        paginationContainer.appendChild(ul);
    }

    // Show error message
    function showError(message) {
        productContainer.innerHTML = `
            <div class="col-span-full flex flex-col items-center justify-center py-12">
                <svg class="w-16 h-16 text-red-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <p class="text-center text-gray-500 text-lg font-medium">${message}</p>
                <p class="text-center text-gray-400 text-sm mt-1">Please try again later</p>
            </div>`;
    }

    // Event listeners
    clearFiltersBtn.addEventListener("click", function () {
        filterForm.reset();
        document.getElementById('searchInput').value = '';
        clearBtn.classList.add('hidden');
        // Clear URL and fetch default products
        window.history.pushState({ path: '/shop' }, '', '/shop');
        fetchFilteredProducts(1);
    });

    searchForm.addEventListener("submit", function (e) {
        e.preventDefault();
        fetchFilteredProducts(1);
    });

    filterForm.addEventListener("change", function () {
        fetchFilteredProducts(1);
    });

    document.getElementById("sortSelect").addEventListener("change", function () {
        fetchFilteredProducts(1);
    });

    // Handle browser back/forward buttons
    window.addEventListener('popstate', function() {
        initFiltersFromURL();
    });
});
</script>

<%- include('../../views/partials/user/footer') %>
