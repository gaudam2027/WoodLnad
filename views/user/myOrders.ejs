<link rel="stylesheet" href="/css/profile.css">
<%- include('../../views/partials/user/header') %>

<div class="container mx-auto px-6 py-12">
  <div class="grid grid-cols-1 md:grid-cols-3 gap-6">

    <!-- Sidebar -->
    <div class="bg-white p-6 rounded-lg shadow-md min-h-[500px] flex flex-col">
      <ul class="space-y-2">
        <li><a href="/profile" class="block py-2 px-4 rounded hover:bg-gray-200">Profile</a></li>
        <li><a href="/order" class="block py-2 px-4 rounded bg-gray-100 font-semibold">My Orders</a></li>
        <li><a href="/address" class="block py-2 px-4 rounded hover:bg-gray-200">Manage Address</a></li>
        <li><a href="/wishlist" class="block py-2 px-4 rounded hover:bg-gray-200">WishList</a></li>
        <li><a href="/wallet" class="block py-2 px-4 rounded hover:bg-gray-200">Wallet</a></li>
      </ul>
      <button class="mt-auto w-full bg-gray-800 text-white px-4 py-2 rounded hover:bg-gray-700" onclick="logout()">Logout</button>
    </div>

    <!-- Orders Section -->
    <div class="col-span-2 bg-white p-6 rounded-lg shadow-md h-[590px] relative flex flex-col" style="height: 565px;">
      <div class="flex justify-between items-center mb-6 flex-shrink-0">
        <h2 class="text-xl font-semibold">My Orders</h2>
        
        <!-- Search Bar -->
        <div class="relative">
          <input 
            type="text" 
            id="searchInput" 
            placeholder="Search orders..." 
            class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-800 focus:border-transparent"
            onkeyup="searchOrders()"
          >
          <svg class="absolute left-3 top-2.5 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </div>
      </div>

      <% if (!orders || orders.length === 0) { %>
        <div class="flex-grow flex items-center justify-center">
          <div class="text-center">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"></path>
            </svg>
            <p class="text-gray-600 mt-2">You have no orders yet.</p>
          </div>
        </div>
      <% } else { %>
        <div class="flex-grow overflow-y-auto scrollbar-hide space-y-4 pr-2 pb-16" id="ordersContainer">
          <% orders.forEach(order => { %>
            <div class="border rounded-lg p-4 hover:shadow-md transition order-card" data-order-id="<%= order.orderId %>" data-order-date="<%= order.createdOn.toLocaleDateString() %>">
              <!-- Order Header -->
              <div class="flex justify-between items-start mb-4 pb-3 border-b border-gray-200">
                <div>
                  <h3 class="font-bold text-gray-800">Order #<%= order.orderId %></h3>
                  <p class="text-sm text-gray-500">Order Date: <%= order.createdOn.toLocaleDateString() %></p>
                  <p class="text-sm text-gray-500">Total Amount: ₹<%= order.finalAmount %></p>
                  <% if (order.returnReasonTitle && ['Return Request', 'Returned', 'Return Accepted', 'Return Rejected'].includes(order.orderStatus)) { %>
                    <p class="text-sm text-gray-500">Return Reason: <%= order.returnReasonTitle %></p>
                    <% if (order.returnReason && order.returnReason !== 'none') { %>
                      <p class="text-sm text-gray-500">Details: <%= order.returnReason %></p>
                    <% } %>
                  <% } %>
                </div>
                <div class="flex flex-col items-end space-y-2">
                  <% 
                    let statusColor;
                    if (order.orderStatus === 'Delivered') {
                      statusColor = 'bg-green-100 text-green-800';
                    } else if (order.orderStatus === 'Cancelled') {
                      statusColor = 'bg-red-100 text-red-800';
                    } else if (order.orderStatus === 'Returned' || order.orderStatus === 'Return Request' || order.orderStatus === 'Return Accepted' || order.orderStatus === 'Return Rejected') {
                      statusColor = 'bg-yellow-100 text-yellow-800';
                    } else if (order.orderStatus === 'Shipped') {
                      statusColor = 'bg-blue-100 text-blue-800';
                    } else {
                      statusColor = 'bg-gray-100 text-gray-800';
                    }
                  %>
                  <span class="inline-block px-3 py-1 rounded-full text-xs font-medium <%= statusColor %>">
                    <%= order.orderStatus %>
                  </span>
                  
                  <!-- Action Buttons -->
                  <div class="flex space-x-2">
                    <button onclick="viewOrderDetails('<%= order._id %>')" class="text-xs bg-gray-800 text-white px-3 py-1 rounded hover:bg-gray-700">
                      View Details
                    </button>
                    <button onclick="downloadInvoice('<%= order._id %>')" class="text-xs bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700">
                      Invoice
                    </button>
                    <% if (order.orderStatus !== 'Cancelled' && order.orderStatus !== 'Delivered' && order.orderStatus !== 'Returned' && order.orderStatus !== 'Return Request' && order.orderStatus !== 'Return Accepted' && order.orderStatus !== 'Return Rejected') { %>
                      <button onclick="openActionModal('<%= order._id %>', 'cancel', 'order')" class="text-xs bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700">
                        Cancel Order
                      </button>
                    <% } %>
                    <% if (order.orderStatus === 'Delivered') { %>
                      <button onclick="openActionModal('<%= order._id %>', 'return', 'order')" class="text-xs bg-yellow-600 text-white px-3 py-1 rounded hover:bg-yellow-700">
                        Return Order
                      </button>
                    <% } %>
                  </div>
                </div>
              </div>

              <!-- Order Items -->
              <div class="space-y-3">
                <% order.items.forEach(item => { %>
                  <div class="flex gap-4 p-3 bg-gray-50 rounded-lg">
                    <% let imgSrc = item.product.images && item.product.images.length > 0 ? `/Uploads/product-images/${item.product.images[0]}` : '/images/default.jpg'; %>
                    <img src="<%= imgSrc %>" alt="Product Image" class="w-16 h-16 object-cover rounded-lg">
                    <div class="flex-1 flex justify-between items-start">
                      <div>
                        <p class="font-medium text-gray-800"><%= item.product.productName %></p>
                        <p class="text-sm text-gray-500">Variant: <%= item.variant.color || 'N/A' %></p>
                        <p class="text-sm text-gray-500">Quantity: <%= item.quantity %></p>
                        <% 
                          let itemStatusColor;
                          if (item.status === 'Delivered') {
                            itemStatusColor = 'bg-green-100 text-green-800';
                          } else if (item.status === 'Cancelled') {
                            itemStatusColor = 'bg-red-100 text-red-800';
                          } else if (item.status === 'Returned' || item.status === 'Return Request' || item.status === 'return_accepted' || item.status === 'return_rejected') {
                            itemStatusColor = 'bg-yellow-100 text-yellow-800';
                          } else {
                            itemStatusColor = 'bg-blue-100 text-blue-800';
                          }
                        %>
                        <span class="inline-block mt-1 px-2 py-1 rounded text-xs font-medium <%= itemStatusColor %>">
                          <%= item.status %>
                        </span>
                        <% if (item.returnReasonTitle && ['Return Request', 'Returned', 'return_accepted', 'return_rejected'].includes(item.status)) { %>
                          <p class="text-sm text-gray-500 mt-1">Return Reason: <%= item.returnReasonTitle %></p>
                          <% if (item.returnReason && item.returnReason !== 'none') { %>
                            <p class="text-sm text-gray-500">Details: <%= item.returnReason %></p>
                          <% } %>
                        <% } %>
                      </div>
                      <div class="text-right flex items-center space-x-3">
                        <div>
                          <p class="text-sm">Price: ₹<%= item.price %></p>
                          <p class="font-semibold">Total: ₹<%= item.price * item.quantity %></p>
                        </div>
                        <% if (item.status !== 'Cancelled' && item.status !== 'Returned' && item.status !== 'Return Request' && item.status !== 'return_accepted' && item.status !== 'Return Rejected' && order.orderStatus !== 'Cancelled') { %>
                          <div class="flex flex-col space-y-1">
                            <% if (item.status !== 'Delivered') { %>
                              <button onclick="openActionModal('<%= order._id %>', 'cancel', 'item', '<%= item._id %>')" class="text-xs bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600">
                                Cancel Item
                              </button>
                            <% } %>
                            <% if (item.status === 'Delivered' && item.canRequestReturn) { %>
                              <button onclick="openActionModal('<%= order._id %>', 'return', 'item', '<%= item._id %>')" class="text-xs bg-yellow-500 text-white px-2 py-1 rounded hover:bg-yellow-600">
                                Return
                              </button>
                            <% } %>
                          </div>
                        <% } %>
                      </div>
                    </div>
                  </div>
                <% }) %>
              </div>
            </div>
          <% }) %>
        </div>
      <% } %>

      <!-- Pagination -->
      <% if (totalPages > 1) { %>
        <div class="absolute bottom-4 left-0 right-0 flex justify-center space-x-2">
          <% for (let i = 1; i <= totalPages; i++) { %>
            <a href="/order?page=<%= i %>" 
              class="px-4 py-2 border rounded 
                <% if (i === currentPage) { %> bg-gray-800 text-white <% } else { %> bg-white text-gray-800 hover:bg-gray-200 <% } %>">
              <%= i %>
            </a>
          <% } %>
        </div>
      <% } %>
    </div>
  </div>
</div>

<!-- Cancel Modal -->
<div id="cancelModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center">
  <div class="bg-white p-6 rounded-lg shadow-lg max-w-md w-full mx-4">
    <h3 class="text-lg font-semibold mb-4">Cancel <span id="cancelType"></span></h3>
    <p class="text-gray-600 mb-4">Are you sure you want to cancel this <span id="cancelTypeText"></span>?</p>

    <div class="mb-4">
      <label class="block text-sm font-medium text-gray-700 mb-2">Select Reason (Optional)</label>
      <select 
        id="cancelReasonSelect"
        class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-gray-800 focus:border-transparent"
      >
        <option value="">-- Select Reason --</option>
        <% cancelReasons.forEach(reason => { %>
          <option value="<%= reason %>"><%= reason %></option>
        <% }) %>
      </select>
    </div>

    <div class="mb-4">
      <label class="block text-sm font-medium text-gray-700 mb-2">Additional Details (Optional)</label>
      <textarea 
        id="cancelAdditionalDetails"
        rows="3"
        class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-gray-800 focus:border-transparent"
        placeholder="Provide additional details if any..."
      ></textarea>
    </div>

    <div class="flex justify-end space-x-3">
      <button onclick="closeActionModals()" class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50">
        Cancel
      </button>
      <button onclick="confirmAction()" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700">
        Confirm Cancel
      </button>
    </div>
  </div>
</div>

<!-- Return Modal -->
<div id="returnModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center">
  <div class="bg-white p-6 rounded-lg shadow-lg max-w-md w-full mx-4">
    <h3 class="text-lg font-semibold mb-4">Return <span id="returnType">Item</span></h3>
    <p class="text-gray-600 mb-4">Please provide a reason for returning this <span id="returnTypeText">item</span>.</p>

    <div class="mb-4">
      <label class="block text-sm font-medium text-gray-700 mb-2">Select Reason (Required) <span class="text-red-500">*</span></label>
      <select 
        id="returnReasonSelect"
        class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-gray-800 focus:border-transparent"
        required
      >
        <option value="">-- Select Reason --</option>
        <% returnReasons.forEach(reason => { %>
          <option value="<%= reason %>"><%= reason %></option>
        <% }) %>
      </select>
      <p id="returnReasonError" class="text-red-500 text-sm mt-1 hidden">Please select a reason for return.</p>
    </div>

    <div class="mb-4">
      <label class="block text-sm font-medium text-gray-700 mb-2">Additional Details (Optional)</label>
      <textarea 
        id="returnAdditionalDetails"
        rows="3"
        class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-gray-800 focus:border-transparent"
        placeholder="Provide additional details if any..."
      ></textarea>
    </div>

    <div class="flex justify-end space-x-3">
      <button onclick="closeActionModals()" class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50">
        Cancel
      </button>
      <button onclick="confirmAction()" class="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700">
        Submit Return
      </button>
    </div>
  </div>
</div>

<script>
let currentOrderId = null;
let currentItemId = null;
let currentAction = null; // 'cancel' or 'return'
let currentType = null;   // 'order' or 'item'

// Search functionality
function searchOrders() {
  const searchTerm = document.getElementById('searchInput').value.toLowerCase();
  const orderCards = document.querySelectorAll('.order-card');

  orderCards.forEach(card => {
    const orderId = card.dataset.orderId.toLowerCase();
    const orderDate = card.dataset.orderDate.toLowerCase();
    const orderText = card.textContent.toLowerCase();

    card.style.display = (orderId.includes(searchTerm) || orderDate.includes(searchTerm) || orderText.includes(searchTerm)) ? 'block' : 'none';
  });
}

// View order details
function viewOrderDetails(orderId) {
  window.location.href = `/order-details/${orderId}`;
}

// Download invoice
function downloadInvoice(orderId) {
  window.open(`/orders/${orderId}/invoice`, '_blank');
}

// Open action modal (Cancel or Return)
function openActionModal(orderId, action, type, itemId = null) {
  currentOrderId = orderId;
  currentItemId = itemId;
  currentAction = action; // 'cancel' or 'return'
  currentType = type;     // 'order' or 'item'

  const modalId = action === 'cancel' ? 'cancelModal' : 'returnModal';
  document.getElementById(modalId).classList.remove('hidden');

  document.getElementById(`${action}ReasonSelect`).value = '';
  document.getElementById(`${action}AdditionalDetails`).value = '';

  const errorElement = document.getElementById(`${action}ReasonError`);
  if (errorElement) errorElement.classList.add('hidden');

  // Update modal text
  if (document.getElementById(`${action}Type`)) {
    document.getElementById(`${action}Type`).textContent = type === 'order' ? 'Order' : 'Item';
  }
  if (document.getElementById(`${action}TypeText`)) {
    document.getElementById(`${action}TypeText`).textContent = type;
  }
}

// Close action modals
function closeActionModals() {
  document.getElementById('cancelModal').classList.add('hidden');
  document.getElementById('returnModal').classList.add('hidden');
  currentOrderId = null;
  currentItemId = null;
  currentAction = null;
  currentType = null;
}

// Confirm action (Cancel or Return)
function confirmAction() {
  const reasonSelect = document.getElementById(`${currentAction}ReasonSelect`);
  const additionalInput = document.getElementById(`${currentAction}AdditionalDetails`);
  const errorElement = document.getElementById(`${currentAction}ReasonError`);

  const selectedReason = reasonSelect ? reasonSelect.value.trim() : '';
  const additionalDetails = additionalInput ? additionalInput.value.trim() : '';

  // For returns, reason is required
  if (currentAction === 'return' && !selectedReason && errorElement) {
    errorElement.classList.remove('hidden');
    return;
  }
  if (errorElement) errorElement.classList.add('hidden');

  const requestData = {
    orderId: currentOrderId,
    itemId: currentItemId,
    action: currentAction,   // 'cancel' or 'return'
    type: currentType,      // 'order' or 'item'
    reasonTitle: selectedReason,
    reason: additionalDetails || 'none'
  };

  fetch('/orders/action', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(requestData)
  })
  .then(res => res.json())
  .then(data => {
    if (data.success) {
      alert(data.message);
      location.reload();
    } else {
      alert('Error: ' + data.message);
    }
  })
  .catch(err => {
    console.error('Error:', err);
    alert('An error occurred while processing your request.');
  });

  closeActionModals();
}

// Logout function
function logout() {
  if (confirm('Are you sure you want to logout?')) {
    window.location.href = '/logout';
  }
}

// Close modals when clicking outside
document.addEventListener('click', function(event) {
  const cancelModal = document.getElementById('cancelModal');
  const returnModal = document.getElementById('returnModal');

  if (event.target === cancelModal || event.target === returnModal) {
    closeActionModals();
  }
});

// Close modals with Escape key
document.addEventListener('keydown', function(event) {
  if (event.key === 'Escape') {
    closeActionModals();
  }
});
</script>

<style>
.scrollbar-hide {
  -ms-overflow-style: none;
  scrollbar-width: none;
}

.scrollbar-hide::-webkit-scrollbar {
  display: none;
}

.order-card {
  transition: all 0.2s ease-in-out;
}

.order-card:hover {
  transform: translateY(-1px);
}

/* Custom focus styles */
input:focus, textarea:focus {
  box-shadow: 0 0 0 3px rgba(55, 65, 81, 0.1);
}

/* Button hover effects */
button {
  transition: all 0.2s ease-in-out;
}

/* Modal animations */
#cancelModal, #returnModal {
  animation: fadeIn 0.2s ease-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .container {
    padding: 1rem;
  }
  
  .grid {
    grid-template-columns: 1fr;
  }
  
  .col-span-2 {
    grid-column: span 1;
  }
}
</style>

<%- include('../../views/partials/user/footer') %>